/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.Instance;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Resource;
import org.xtext.example.mydsl.myDsl.ResourceMapping;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Resource Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ResourceMappingImpl#getRequiredResource <em>Required Resource</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ResourceMappingImpl#getUsedResource <em>Used Resource</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ResourceMappingImpl#getSubMappings <em>Sub Mappings</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ResourceMappingImpl extends MinimalEObjectImpl.Container implements ResourceMapping
{
  /**
   * The cached value of the '{@link #getRequiredResource() <em>Required Resource</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequiredResource()
   * @generated
   * @ordered
   */
  protected Instance requiredResource;

  /**
   * The cached value of the '{@link #getUsedResource() <em>Used Resource</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUsedResource()
   * @generated
   * @ordered
   */
  protected Resource usedResource;

  /**
   * The cached value of the '{@link #getSubMappings() <em>Sub Mappings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubMappings()
   * @generated
   * @ordered
   */
  protected EList<ResourceMapping> subMappings;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResourceMappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.RESOURCE_MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instance getRequiredResource()
  {
    if (requiredResource != null && requiredResource.eIsProxy())
    {
      InternalEObject oldRequiredResource = (InternalEObject)requiredResource;
      requiredResource = (Instance)eResolveProxy(oldRequiredResource);
      if (requiredResource != oldRequiredResource)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.RESOURCE_MAPPING__REQUIRED_RESOURCE, oldRequiredResource, requiredResource));
      }
    }
    return requiredResource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instance basicGetRequiredResource()
  {
    return requiredResource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRequiredResource(Instance newRequiredResource)
  {
    Instance oldRequiredResource = requiredResource;
    requiredResource = newRequiredResource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.RESOURCE_MAPPING__REQUIRED_RESOURCE, oldRequiredResource, requiredResource));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Resource getUsedResource()
  {
    if (usedResource != null && usedResource.eIsProxy())
    {
      InternalEObject oldUsedResource = (InternalEObject)usedResource;
      usedResource = (Resource)eResolveProxy(oldUsedResource);
      if (usedResource != oldUsedResource)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.RESOURCE_MAPPING__USED_RESOURCE, oldUsedResource, usedResource));
      }
    }
    return usedResource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Resource basicGetUsedResource()
  {
    return usedResource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUsedResource(Resource newUsedResource)
  {
    Resource oldUsedResource = usedResource;
    usedResource = newUsedResource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.RESOURCE_MAPPING__USED_RESOURCE, oldUsedResource, usedResource));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ResourceMapping> getSubMappings()
  {
    if (subMappings == null)
    {
      subMappings = new EObjectContainmentEList<ResourceMapping>(ResourceMapping.class, this, MyDslPackage.RESOURCE_MAPPING__SUB_MAPPINGS);
    }
    return subMappings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.RESOURCE_MAPPING__SUB_MAPPINGS:
        return ((InternalEList<?>)getSubMappings()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.RESOURCE_MAPPING__REQUIRED_RESOURCE:
        if (resolve) return getRequiredResource();
        return basicGetRequiredResource();
      case MyDslPackage.RESOURCE_MAPPING__USED_RESOURCE:
        if (resolve) return getUsedResource();
        return basicGetUsedResource();
      case MyDslPackage.RESOURCE_MAPPING__SUB_MAPPINGS:
        return getSubMappings();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.RESOURCE_MAPPING__REQUIRED_RESOURCE:
        setRequiredResource((Instance)newValue);
        return;
      case MyDslPackage.RESOURCE_MAPPING__USED_RESOURCE:
        setUsedResource((Resource)newValue);
        return;
      case MyDslPackage.RESOURCE_MAPPING__SUB_MAPPINGS:
        getSubMappings().clear();
        getSubMappings().addAll((Collection<? extends ResourceMapping>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.RESOURCE_MAPPING__REQUIRED_RESOURCE:
        setRequiredResource((Instance)null);
        return;
      case MyDslPackage.RESOURCE_MAPPING__USED_RESOURCE:
        setUsedResource((Resource)null);
        return;
      case MyDslPackage.RESOURCE_MAPPING__SUB_MAPPINGS:
        getSubMappings().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.RESOURCE_MAPPING__REQUIRED_RESOURCE:
        return requiredResource != null;
      case MyDslPackage.RESOURCE_MAPPING__USED_RESOURCE:
        return usedResource != null;
      case MyDslPackage.RESOURCE_MAPPING__SUB_MAPPINGS:
        return subMappings != null && !subMappings.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ResourceMappingImpl
