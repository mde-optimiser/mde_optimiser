/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHardwareModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHardwareModelHardwareModelParserRuleCall_0_0 = (RuleCall)cHardwareModelAssignment_0.eContents().get(0);
		private final Assignment cSoftwareModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSoftwareModelSoftwareModelParserRuleCall_1_0 = (RuleCall)cSoftwareModelAssignment_1.eContents().get(0);
		private final Assignment cRequestsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequestsRequestParserRuleCall_2_0 = (RuleCall)cRequestsAssignment_2.eContents().get(0);
		private final Assignment cObjectiveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectiveObjectiveParserRuleCall_3_0 = (RuleCall)cObjectiveAssignment_3.eContents().get(0);
		private final Assignment cSolutionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSolutionSolutionParserRuleCall_4_0 = (RuleCall)cSolutionAssignment_4.eContents().get(0);
		
		//Model:
		//	hardwareModel=HardwareModel
		//	softwareModel=SoftwareModel
		//	requests+=Request+
		//	objective=Objective
		//	solution=Solution?;
		@Override public ParserRule getRule() { return rule; }
		
		//hardwareModel=HardwareModel softwareModel=SoftwareModel requests+=Request+ objective=Objective solution=Solution?
		public Group getGroup() { return cGroup; }
		
		//hardwareModel=HardwareModel
		public Assignment getHardwareModelAssignment_0() { return cHardwareModelAssignment_0; }
		
		//HardwareModel
		public RuleCall getHardwareModelHardwareModelParserRuleCall_0_0() { return cHardwareModelHardwareModelParserRuleCall_0_0; }
		
		//softwareModel=SoftwareModel
		public Assignment getSoftwareModelAssignment_1() { return cSoftwareModelAssignment_1; }
		
		//SoftwareModel
		public RuleCall getSoftwareModelSoftwareModelParserRuleCall_1_0() { return cSoftwareModelSoftwareModelParserRuleCall_1_0; }
		
		//requests+=Request+
		public Assignment getRequestsAssignment_2() { return cRequestsAssignment_2; }
		
		//Request
		public RuleCall getRequestsRequestParserRuleCall_2_0() { return cRequestsRequestParserRuleCall_2_0; }
		
		//objective=Objective
		public Assignment getObjectiveAssignment_3() { return cObjectiveAssignment_3; }
		
		//Objective
		public RuleCall getObjectiveObjectiveParserRuleCall_3_0() { return cObjectiveObjectiveParserRuleCall_3_0; }
		
		//solution=Solution?
		public Assignment getSolutionAssignment_4() { return cSolutionAssignment_4; }
		
		//Solution
		public RuleCall getSolutionSolutionParserRuleCall_4_0() { return cSolutionSolutionParserRuleCall_4_0; }
	}
	public class HardwareModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HardwareModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_0_0 = (RuleCall)cPropertiesAssignment_0.eContents().get(0);
		private final Assignment cResourceTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResourceTypesResourceTypeParserRuleCall_1_0 = (RuleCall)cResourceTypesAssignment_1.eContents().get(0);
		private final Assignment cResourcesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResourcesResourceParserRuleCall_2_0 = (RuleCall)cResourcesAssignment_2.eContents().get(0);
		
		//// HardwareModel (HW package)
		//HardwareModel:
		//	properties+=Property*
		//	resourceTypes+=ResourceType+
		//	resources+=Resource+;
		@Override public ParserRule getRule() { return rule; }
		
		//properties+=Property* resourceTypes+=ResourceType+ resources+=Resource+
		public Group getGroup() { return cGroup; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_0() { return cPropertiesAssignment_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_0_0() { return cPropertiesPropertyParserRuleCall_0_0; }
		
		//resourceTypes+=ResourceType+
		public Assignment getResourceTypesAssignment_1() { return cResourceTypesAssignment_1; }
		
		//ResourceType
		public RuleCall getResourceTypesResourceTypeParserRuleCall_1_0() { return cResourceTypesResourceTypeParserRuleCall_1_0; }
		
		//resources+=Resource+
		public Assignment getResourcesAssignment_2() { return cResourcesAssignment_2; }
		
		//Resource
		public RuleCall getResourcesResourceParserRuleCall_2_0() { return cResourcesResourceParserRuleCall_2_0; }
	}
	public class ResourceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ResourceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContainerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cContainerContainerKeyword_0_0 = (Keyword)cContainerAssignment_0.eContents().get(0);
		private final Keyword cResourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cResourceTypesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResourceTypesResourceTypeParserRuleCall_5_0 = (RuleCall)cResourceTypesAssignment_5.eContents().get(0);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cUsingKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cPropertyKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cPropertyReferencesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cPropertyReferencesPropertyCrossReference_7_2_0 = (CrossReference)cPropertyReferencesAssignment_7_2.eContents().get(0);
		private final RuleCall cPropertyReferencesPropertyIDTerminalRuleCall_7_2_0_1 = (RuleCall)cPropertyReferencesPropertyCrossReference_7_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ResourceType:
		//	container?='container'? 'resource' 'type' name=ID '{'
		//	// TODO Would need to add a validation to make sure that only containers contain other resources
		//	resourceTypes+=ResourceType*
		//	// TODO Would need to add a validation to make sure that containers contain no properties
		//	properties+=Property* ('using' 'property' propertyReferences+=[Property])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//container?='container'? 'resource' 'type' name=ID '{' // TODO Would need to add a validation to make sure that only containers contain other resources
		//resourceTypes+=ResourceType* // TODO Would need to add a validation to make sure that containers contain no properties
		//properties+=Property* ('using' 'property' propertyReferences+=[Property])* '}'
		public Group getGroup() { return cGroup; }
		
		//container?='container'?
		public Assignment getContainerAssignment_0() { return cContainerAssignment_0; }
		
		//'container'
		public Keyword getContainerContainerKeyword_0_0() { return cContainerContainerKeyword_0_0; }
		
		//'resource'
		public Keyword getResourceKeyword_1() { return cResourceKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//// TODO Would need to add a validation to make sure that only containers contain other resources
		//resourceTypes+=ResourceType*
		public Assignment getResourceTypesAssignment_5() { return cResourceTypesAssignment_5; }
		
		//ResourceType
		public RuleCall getResourceTypesResourceTypeParserRuleCall_5_0() { return cResourceTypesResourceTypeParserRuleCall_5_0; }
		
		//// TODO Would need to add a validation to make sure that containers contain no properties
		//properties+=Property*
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0() { return cPropertiesPropertyParserRuleCall_6_0; }
		
		//('using' 'property' propertyReferences+=[Property])*
		public Group getGroup_7() { return cGroup_7; }
		
		//'using'
		public Keyword getUsingKeyword_7_0() { return cUsingKeyword_7_0; }
		
		//'property'
		public Keyword getPropertyKeyword_7_1() { return cPropertyKeyword_7_1; }
		
		//propertyReferences+=[Property]
		public Assignment getPropertyReferencesAssignment_7_2() { return cPropertyReferencesAssignment_7_2; }
		
		//[Property]
		public CrossReference getPropertyReferencesPropertyCrossReference_7_2_0() { return cPropertyReferencesPropertyCrossReference_7_2_0; }
		
		//ID
		public RuleCall getPropertyReferencesPropertyIDTerminalRuleCall_7_2_0_1() { return cPropertyReferencesPropertyIDTerminalRuleCall_7_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeResourceTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeResourceTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeResourceTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cResourcesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResourcesResourceParserRuleCall_5_0 = (RuleCall)cResourcesAssignment_5.eContents().get(0);
		private final Assignment cValuesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuesCurrentResourceValueParserRuleCall_6_0 = (RuleCall)cValuesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Resource:
		//	'resource' name=ID ':' type=[ResourceType] '{'
		//	resources+=Resource*
		//	values+=CurrentResourceValue*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'resource' name=ID ':' type=[ResourceType] '{' resources+=Resource* values+=CurrentResourceValue* '}'
		public Group getGroup() { return cGroup; }
		
		//'resource'
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[ResourceType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[ResourceType]
		public CrossReference getTypeResourceTypeCrossReference_3_0() { return cTypeResourceTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeResourceTypeIDTerminalRuleCall_3_0_1() { return cTypeResourceTypeIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//resources+=Resource*
		public Assignment getResourcesAssignment_5() { return cResourcesAssignment_5; }
		
		//Resource
		public RuleCall getResourcesResourceParserRuleCall_5_0() { return cResourcesResourceParserRuleCall_5_0; }
		
		//values+=CurrentResourceValue*
		public Assignment getValuesAssignment_6() { return cValuesAssignment_6; }
		
		//CurrentResourceValue
		public RuleCall getValuesCurrentResourceValueParserRuleCall_6_0() { return cValuesCurrentResourceValueParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CurrentResourceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CurrentResourceValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyPropertyCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyPropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cPropertyPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//CurrentResourceValue:
		//	property=[Property] '=' value=LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//property=[Property] '=' value=LiteralExpression
		public Group getGroup() { return cGroup; }
		
		//property=[Property]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//[Property]
		public CrossReference getPropertyPropertyCrossReference_0_0() { return cPropertyPropertyCrossReference_0_0; }
		
		//ID
		public RuleCall getPropertyPropertyIDTerminalRuleCall_0_0_1() { return cPropertyPropertyIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=LiteralExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//LiteralExpression
		public RuleCall getValueLiteralExpressionParserRuleCall_2_0() { return cValueLiteralExpressionParserRuleCall_2_0; }
	}
	public class SoftwareModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SoftwareModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_0_0_0 = (RuleCall)cPropertiesAssignment_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cParametersMetaParameterParserRuleCall_0_1_0 = (RuleCall)cParametersAssignment_0_1.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsComponentParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		
		//// SoftwareModel (SW Package)
		//SoftwareModel:
		//	(properties+=Property | parameters+=MetaParameter)*
		//	components+=Component+;
		@Override public ParserRule getRule() { return rule; }
		
		//(properties+=Property | parameters+=MetaParameter)* components+=Component+
		public Group getGroup() { return cGroup; }
		
		//(properties+=Property | parameters+=MetaParameter)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_0_0() { return cPropertiesAssignment_0_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_0_0_0() { return cPropertiesPropertyParserRuleCall_0_0_0; }
		
		//parameters+=MetaParameter
		public Assignment getParametersAssignment_0_1() { return cParametersAssignment_0_1; }
		
		//MetaParameter
		public RuleCall getParametersMetaParameterParserRuleCall_0_1_0() { return cParametersMetaParameterParserRuleCall_0_1_0; }
		
		//components+=Component+
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_1_0() { return cComponentsComponentParserRuleCall_1_0; }
	}
	public class MetaParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MetaParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//MetaParameter:
		//	'meta' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'meta' name=ID
		public Group getGroup() { return cGroup; }
		
		//'meta'
		public Keyword getMetaKeyword_0() { return cMetaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitUNITTerminalRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//Property:
		//	'property' name=ID unit=UNIT;
		@Override public ParserRule getRule() { return rule; }
		
		//'property' name=ID unit=UNIT
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//unit=UNIT
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//UNIT
		public RuleCall getUnitUNITTerminalRuleCall_2_0() { return cUnitUNITTerminalRuleCall_2_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUsingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cPropertyKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cUsedPropertiesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cUsedPropertiesPropertyCrossReference_3_2_0 = (CrossReference)cUsedPropertiesAssignment_3_2.eContents().get(0);
		private final RuleCall cUsedPropertiesPropertyIDTerminalRuleCall_3_2_0_1 = (RuleCall)cUsedPropertiesPropertyCrossReference_3_2_0.eContents().get(1);
		private final Assignment cImplementationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImplementationsImplementationParserRuleCall_4_0 = (RuleCall)cImplementationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUsingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cPropertyKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cUsedPropertiesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cUsedPropertiesPropertyCrossReference_5_2_0 = (CrossReference)cUsedPropertiesAssignment_5_2.eContents().get(0);
		private final RuleCall cUsedPropertiesPropertyIDTerminalRuleCall_5_2_0_1 = (RuleCall)cUsedPropertiesPropertyCrossReference_5_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Component:
		//	'component' name=ID '{' ('using' 'property' usedProperties+=[Property])*
		//	implementations+=Implementation+ ('using' 'property' usedProperties+=[Property])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'component' name=ID '{' ('using' 'property' usedProperties+=[Property])* implementations+=Implementation+ ('using'
		//'property' usedProperties+=[Property])* '}'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('using' 'property' usedProperties+=[Property])*
		public Group getGroup_3() { return cGroup_3; }
		
		//'using'
		public Keyword getUsingKeyword_3_0() { return cUsingKeyword_3_0; }
		
		//'property'
		public Keyword getPropertyKeyword_3_1() { return cPropertyKeyword_3_1; }
		
		//usedProperties+=[Property]
		public Assignment getUsedPropertiesAssignment_3_2() { return cUsedPropertiesAssignment_3_2; }
		
		//[Property]
		public CrossReference getUsedPropertiesPropertyCrossReference_3_2_0() { return cUsedPropertiesPropertyCrossReference_3_2_0; }
		
		//ID
		public RuleCall getUsedPropertiesPropertyIDTerminalRuleCall_3_2_0_1() { return cUsedPropertiesPropertyIDTerminalRuleCall_3_2_0_1; }
		
		//implementations+=Implementation+
		public Assignment getImplementationsAssignment_4() { return cImplementationsAssignment_4; }
		
		//Implementation
		public RuleCall getImplementationsImplementationParserRuleCall_4_0() { return cImplementationsImplementationParserRuleCall_4_0; }
		
		//('using' 'property' usedProperties+=[Property])*
		public Group getGroup_5() { return cGroup_5; }
		
		//'using'
		public Keyword getUsingKeyword_5_0() { return cUsingKeyword_5_0; }
		
		//'property'
		public Keyword getPropertyKeyword_5_1() { return cPropertyKeyword_5_1; }
		
		//usedProperties+=[Property]
		public Assignment getUsedPropertiesAssignment_5_2() { return cUsedPropertiesAssignment_5_2; }
		
		//[Property]
		public CrossReference getUsedPropertiesPropertyCrossReference_5_2_0() { return cUsedPropertiesPropertyCrossReference_5_2_0; }
		
		//ID
		public RuleCall getUsedPropertiesPropertyIDTerminalRuleCall_5_2_0_1() { return cUsedPropertiesPropertyIDTerminalRuleCall_5_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Implementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentRequirementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentRequirementsComponentRequirementParserRuleCall_3_0 = (RuleCall)cComponentRequirementsAssignment_3.eContents().get(0);
		private final Assignment cResourceRequirementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResourceRequirementsResourceRequirementParserRuleCall_4_0 = (RuleCall)cResourceRequirementsAssignment_4.eContents().get(0);
		private final Assignment cClausesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClausesClauseParserRuleCall_5_0 = (RuleCall)cClausesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Implementation:
		//	'contract' name=ID '{'
		//	componentRequirements+=ComponentRequirement*
		//	resourceRequirements+=ResourceRequirement+
		//	clauses+=Clause+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'contract' name=ID '{' componentRequirements+=ComponentRequirement* resourceRequirements+=ResourceRequirement+
		//clauses+=Clause+ '}'
		public Group getGroup() { return cGroup; }
		
		//'contract'
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//componentRequirements+=ComponentRequirement*
		public Assignment getComponentRequirementsAssignment_3() { return cComponentRequirementsAssignment_3; }
		
		//ComponentRequirement
		public RuleCall getComponentRequirementsComponentRequirementParserRuleCall_3_0() { return cComponentRequirementsComponentRequirementParserRuleCall_3_0; }
		
		//resourceRequirements+=ResourceRequirement+
		public Assignment getResourceRequirementsAssignment_4() { return cResourceRequirementsAssignment_4; }
		
		//ResourceRequirement
		public RuleCall getResourceRequirementsResourceRequirementParserRuleCall_4_0() { return cResourceRequirementsResourceRequirementParserRuleCall_4_0; }
		
		//clauses+=Clause+
		public Assignment getClausesAssignment_5() { return cClausesAssignment_5; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_5_0() { return cClausesClauseParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Instance");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Instance:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ComponentRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ComponentRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstanceInstanceParserRuleCall_1_0 = (RuleCall)cInstanceAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeComponentCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeComponentIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeComponentCrossReference_4_0.eContents().get(1);
		
		//ComponentRequirement:
		//	'requires component' instance=Instance 'of' 'type' type=[Component];
		@Override public ParserRule getRule() { return rule; }
		
		//'requires component' instance=Instance 'of' 'type' type=[Component]
		public Group getGroup() { return cGroup; }
		
		//'requires component'
		public Keyword getRequiresComponentKeyword_0() { return cRequiresComponentKeyword_0; }
		
		//instance=Instance
		public Assignment getInstanceAssignment_1() { return cInstanceAssignment_1; }
		
		//Instance
		public RuleCall getInstanceInstanceParserRuleCall_1_0() { return cInstanceInstanceParserRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[Component]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[Component]
		public CrossReference getTypeComponentCrossReference_4_0() { return cTypeComponentCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeComponentIDTerminalRuleCall_4_0_1() { return cTypeComponentIDTerminalRuleCall_4_0_1; }
	}
	public class ResourceRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ResourceRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstanceInstanceParserRuleCall_1_0 = (RuleCall)cInstanceAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeResourceTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeResourceTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeResourceTypeCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cResourceRequirementsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cResourceRequirementsResourceRequirementParserRuleCall_5_2_0 = (RuleCall)cResourceRequirementsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//ResourceRequirement:
		//	'requires resource'? instance=Instance 'of' 'type' type=[ResourceType] ('with' '{'
		//	resourceRequirements+=ResourceRequirement+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'requires resource'? instance=Instance 'of' 'type' type=[ResourceType] ('with' '{'
		//resourceRequirements+=ResourceRequirement+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'requires resource'?
		public Keyword getRequiresResourceKeyword_0() { return cRequiresResourceKeyword_0; }
		
		//instance=Instance
		public Assignment getInstanceAssignment_1() { return cInstanceAssignment_1; }
		
		//Instance
		public RuleCall getInstanceInstanceParserRuleCall_1_0() { return cInstanceInstanceParserRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[ResourceType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[ResourceType]
		public CrossReference getTypeResourceTypeCrossReference_4_0() { return cTypeResourceTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeResourceTypeIDTerminalRuleCall_4_0_1() { return cTypeResourceTypeIDTerminalRuleCall_4_0_1; }
		
		//('with' '{' resourceRequirements+=ResourceRequirement+ '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'with'
		public Keyword getWithKeyword_5_0() { return cWithKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//resourceRequirements+=ResourceRequirement+
		public Assignment getResourceRequirementsAssignment_5_2() { return cResourceRequirementsAssignment_5_2; }
		
		//ResourceRequirement
		public RuleCall getResourceRequirementsResourceRequirementParserRuleCall_5_2_0() { return cResourceRequirementsResourceRequirementParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeClauseTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cLHSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLHSPropertyDesignatorWithOptionalInstanceParserRuleCall_1_0 = (RuleCall)cLHSAssignment_1.eContents().get(0);
		private final Assignment cCompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompClauseComparatorEnumRuleCall_2_0 = (RuleCall)cCompAssignment_2.eContents().get(0);
		private final Assignment cRHSAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRHSExpressionParserRuleCall_3_0 = (RuleCall)cRHSAssignment_3.eContents().get(0);
		
		//Clause:
		//	type=ClauseType LHS= /*Designator*/ PropertyDesignatorWithOptionalInstance comp=ClauseComparator RHS=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ClauseType LHS= /*Designator*/ PropertyDesignatorWithOptionalInstance comp=ClauseComparator RHS=Expression
		public Group getGroup() { return cGroup; }
		
		//type=ClauseType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ClauseType
		public RuleCall getTypeClauseTypeEnumRuleCall_0_0() { return cTypeClauseTypeEnumRuleCall_0_0; }
		
		//LHS= /*Designator*/ PropertyDesignatorWithOptionalInstance
		public Assignment getLHSAssignment_1() { return cLHSAssignment_1; }
		
		///*Designator*/ PropertyDesignatorWithOptionalInstance
		public RuleCall getLHSPropertyDesignatorWithOptionalInstanceParserRuleCall_1_0() { return cLHSPropertyDesignatorWithOptionalInstanceParserRuleCall_1_0; }
		
		//comp=ClauseComparator
		public Assignment getCompAssignment_2() { return cCompAssignment_2; }
		
		//ClauseComparator
		public RuleCall getCompClauseComparatorEnumRuleCall_2_0() { return cCompClauseComparatorEnumRuleCall_2_0; }
		
		//RHS=Expression
		public Assignment getRHSAssignment_3() { return cRHSAssignment_3; }
		
		//Expression
		public RuleCall getRHSExpressionParserRuleCall_3_0() { return cRHSExpressionParserRuleCall_3_0; }
	}
	public class RequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Request");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cComponentComponentCrossReference_3_0 = (CrossReference)cComponentAssignment_3.eContents().get(0);
		private final RuleCall cComponentComponentIDTerminalRuleCall_3_0_1 = (RuleCall)cComponentComponentCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParameterAssignmentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParameterAssignmentsMetaParameterAssignmentParserRuleCall_5_0 = (RuleCall)cParameterAssignmentsAssignment_5.eContents().get(0);
		private final Assignment cRequirementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRequirementsClauseParserRuleCall_6_0 = (RuleCall)cRequirementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Request:
		//	'request' name=ID 'for' component=[Component] '{'
		//	parameterAssignments+=MetaParameterAssignment*
		//	requirements+=Clause+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'request' name=ID 'for' component=[Component] '{' parameterAssignments+=MetaParameterAssignment* requirements+=Clause+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'request'
		public Keyword getRequestKeyword_0() { return cRequestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//component=[Component]
		public Assignment getComponentAssignment_3() { return cComponentAssignment_3; }
		
		//[Component]
		public CrossReference getComponentComponentCrossReference_3_0() { return cComponentComponentCrossReference_3_0; }
		
		//ID
		public RuleCall getComponentComponentIDTerminalRuleCall_3_0_1() { return cComponentComponentIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//parameterAssignments+=MetaParameterAssignment*
		public Assignment getParameterAssignmentsAssignment_5() { return cParameterAssignmentsAssignment_5; }
		
		//MetaParameterAssignment
		public RuleCall getParameterAssignmentsMetaParameterAssignmentParserRuleCall_5_0() { return cParameterAssignmentsMetaParameterAssignmentParserRuleCall_5_0; }
		
		//requirements+=Clause+
		public Assignment getRequirementsAssignment_6() { return cRequirementsAssignment_6; }
		
		//Clause
		public RuleCall getRequirementsClauseParserRuleCall_6_0() { return cRequirementsClauseParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ObjectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Objective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinimizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAggAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAggPropertyAggregationEnumRuleCall_1_0 = (RuleCall)cAggAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPropertyPropertyCrossReference_3_0 = (CrossReference)cPropertyAssignment_3.eContents().get(0);
		private final RuleCall cPropertyPropertyIDTerminalRuleCall_3_0_1 = (RuleCall)cPropertyPropertyCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Objective:
		//	'minimize' agg=PropertyAggregation '(' property=[Property] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'minimize' agg=PropertyAggregation '(' property=[Property] ')'
		public Group getGroup() { return cGroup; }
		
		//'minimize'
		public Keyword getMinimizeKeyword_0() { return cMinimizeKeyword_0; }
		
		//agg=PropertyAggregation
		public Assignment getAggAssignment_1() { return cAggAssignment_1; }
		
		//PropertyAggregation
		public RuleCall getAggPropertyAggregationEnumRuleCall_1_0() { return cAggPropertyAggregationEnumRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//property=[Property]
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//[Property]
		public CrossReference getPropertyPropertyCrossReference_3_0() { return cPropertyPropertyCrossReference_3_0; }
		
		//ID
		public RuleCall getPropertyPropertyIDTerminalRuleCall_3_0_1() { return cPropertyPropertyIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Expressions
		//Expression:
		//	Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BinaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Action cAddExpressionAction_0 = (Action)cAlternatives.eContents().get(0);
		private final Action cMultExpressionAction_1 = (Action)cAlternatives.eContents().get(1);
		private final Action cSubExpressionAction_2 = (Action)cAlternatives.eContents().get(2);
		private final Action cDivExpressionAction_3 = (Action)cAlternatives.eContents().get(3);
		private final Action cPowExpressionAction_4 = (Action)cAlternatives.eContents().get(4);
		
		//// TODO: This doesn't seem to do what we want it to...
		//BinaryExpression:
		//	{AddExpression} | {MultExpression} | {SubExpression} | {DivExpression} | {PowExpression};
		@Override public ParserRule getRule() { return rule; }
		
		//{AddExpression} | {MultExpression} | {SubExpression} | {DivExpression} | {PowExpression}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AddExpression}
		public Action getAddExpressionAction_0() { return cAddExpressionAction_0; }
		
		//{MultExpression}
		public Action getMultExpressionAction_1() { return cMultExpressionAction_1; }
		
		//{SubExpression}
		public Action getSubExpressionAction_2() { return cSubExpressionAction_2; }
		
		//{DivExpression}
		public Action getDivExpressionAction_3() { return cDivExpressionAction_3; }
		
		//{PowExpression}
		public Action getPowExpressionAction_4() { return cPowExpressionAction_4; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAddExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cSubExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication (({AddExpression.left=current} '+' | {SubExpression.left=current} '-') right=Addition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({AddExpression.left=current} '+' | {SubExpression.left=current} '-') right=Addition)?
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({AddExpression.left=current} '+' | {SubExpression.left=current} '-') right=Addition)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{AddExpression.left=current} '+' | {SubExpression.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{AddExpression.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{AddExpression.left=current}
		public Action getAddExpressionLeftAction_1_0_0_0() { return cAddExpressionLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{SubExpression.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{SubExpression.left=current}
		public Action getSubExpressionLeftAction_1_0_1_0() { return cSubExpressionLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication Expression:
		//	Power (({MultExpression.left=current} '*' | {DivExpression.left=current} '/') right=Multiplication)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Power (({MultExpression.left=current} '*' | {DivExpression.left=current} '/') right=Multiplication)?
		public Group getGroup() { return cGroup; }
		
		//Power
		public RuleCall getPowerParserRuleCall_0() { return cPowerParserRuleCall_0; }
		
		//(({MultExpression.left=current} '*' | {DivExpression.left=current} '/') right=Multiplication)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultExpression.left=current} '*' | {DivExpression.left=current} '/'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{MultExpression.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{MultExpression.left=current}
		public Action getMultExpressionLeftAction_1_0_0_0() { return cMultExpressionLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{DivExpression.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{DivExpression.left=current}
		public Action getDivExpressionLeftAction_1_0_1_0() { return cDivExpressionLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Power");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Power Expression:
		//	PrimaryExpression ({PowExpression.left=current} '^' right=PrimaryExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({PowExpression.left=current} '^' right=PrimaryExpression)?
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({PowExpression.left=current} '^' right=PrimaryExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PowExpression.left=current}
		public Action getPowExpressionLeftAction_1_0() { return cPowExpressionLeftAction_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cDesignatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimaryExpression Expression:
		//	'(' Expression ')' | Designator | LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | Designator | LiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//Designator
		public RuleCall getDesignatorParserRuleCall_1() { return cDesignatorParserRuleCall_1; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_2() { return cLiteralExpressionParserRuleCall_2; }
	}
	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Designator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyDesignatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMetaParameterDesignatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Designator:
		//	PropertyDesignator | MetaParameterDesignator;
		@Override public ParserRule getRule() { return rule; }
		
		//PropertyDesignator | MetaParameterDesignator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PropertyDesignator
		public RuleCall getPropertyDesignatorParserRuleCall_0() { return cPropertyDesignatorParserRuleCall_0; }
		
		//MetaParameterDesignator
		public RuleCall getMetaParameterDesignatorParserRuleCall_1() { return cMetaParameterDesignatorParserRuleCall_1; }
	}
	public class PropertyDesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PropertyDesignator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanceInstanceCrossReference_0_0 = (CrossReference)cInstanceAssignment_0.eContents().get(0);
		private final RuleCall cInstanceInstanceIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanceInstanceCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPropertyPropertyCrossReference_2_0 = (CrossReference)cPropertyAssignment_2.eContents().get(0);
		private final RuleCall cPropertyPropertyIDTerminalRuleCall_2_0_1 = (RuleCall)cPropertyPropertyCrossReference_2_0.eContents().get(1);
		
		//PropertyDesignator:
		//	instance=[Instance] '.' property=[Property];
		@Override public ParserRule getRule() { return rule; }
		
		//instance=[Instance] '.' property=[Property]
		public Group getGroup() { return cGroup; }
		
		//instance=[Instance]
		public Assignment getInstanceAssignment_0() { return cInstanceAssignment_0; }
		
		//[Instance]
		public CrossReference getInstanceInstanceCrossReference_0_0() { return cInstanceInstanceCrossReference_0_0; }
		
		//ID
		public RuleCall getInstanceInstanceIDTerminalRuleCall_0_0_1() { return cInstanceInstanceIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//property=[Property]
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }
		
		//[Property]
		public CrossReference getPropertyPropertyCrossReference_2_0() { return cPropertyPropertyCrossReference_2_0; }
		
		//ID
		public RuleCall getPropertyPropertyIDTerminalRuleCall_2_0_1() { return cPropertyPropertyIDTerminalRuleCall_2_0_1; }
	}
	public class PropertyDesignatorWithOptionalInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PropertyDesignatorWithOptionalInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cInstanceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cInstanceInstanceCrossReference_0_0_0 = (CrossReference)cInstanceAssignment_0_0.eContents().get(0);
		private final RuleCall cInstanceInstanceIDTerminalRuleCall_0_0_0_1 = (RuleCall)cInstanceInstanceCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPropertyPropertyCrossReference_1_0 = (CrossReference)cPropertyAssignment_1.eContents().get(0);
		private final RuleCall cPropertyPropertyIDTerminalRuleCall_1_0_1 = (RuleCall)cPropertyPropertyCrossReference_1_0.eContents().get(1);
		
		//PropertyDesignatorWithOptionalInstance:
		//	(instance=[Instance] '.')? property=[Property];
		@Override public ParserRule getRule() { return rule; }
		
		//(instance=[Instance] '.')? property=[Property]
		public Group getGroup() { return cGroup; }
		
		//(instance=[Instance] '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//instance=[Instance]
		public Assignment getInstanceAssignment_0_0() { return cInstanceAssignment_0_0; }
		
		//[Instance]
		public CrossReference getInstanceInstanceCrossReference_0_0_0() { return cInstanceInstanceCrossReference_0_0_0; }
		
		//ID
		public RuleCall getInstanceInstanceIDTerminalRuleCall_0_0_0_1() { return cInstanceInstanceIDTerminalRuleCall_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//property=[Property]
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//[Property]
		public CrossReference getPropertyPropertyCrossReference_1_0() { return cPropertyPropertyCrossReference_1_0; }
		
		//ID
		public RuleCall getPropertyPropertyIDTerminalRuleCall_1_0_1() { return cPropertyPropertyIDTerminalRuleCall_1_0_1; }
	}
	public class MetaParameterDesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MetaParameterDesignator");
		private final Assignment cMetaParameterAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cMetaParameterMetaParameterCrossReference_0 = (CrossReference)cMetaParameterAssignment.eContents().get(0);
		private final RuleCall cMetaParameterMetaParameterIDTerminalRuleCall_0_1 = (RuleCall)cMetaParameterMetaParameterCrossReference_0.eContents().get(1);
		
		//MetaParameterDesignator:
		//	metaParameter=[MetaParameter];
		@Override public ParserRule getRule() { return rule; }
		
		//metaParameter=[MetaParameter]
		public Assignment getMetaParameterAssignment() { return cMetaParameterAssignment; }
		
		//[MetaParameter]
		public CrossReference getMetaParameterMetaParameterCrossReference_0() { return cMetaParameterMetaParameterCrossReference_0; }
		
		//ID
		public RuleCall getMetaParameterMetaParameterIDTerminalRuleCall_0_1() { return cMetaParameterMetaParameterIDTerminalRuleCall_0_1; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralExpression:
		//	value=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Double
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_0() { return cValueDoubleParserRuleCall_0; }
	}
	public class MetaParameterAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MetaParameterAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParameterMetaParameterCrossReference_1_0 = (CrossReference)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterMetaParameterIDTerminalRuleCall_1_0_1 = (RuleCall)cParameterMetaParameterCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueLiteralExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//MetaParameterAssignment:
		//	'meta' parameter=[MetaParameter] '=' value=LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'meta' parameter=[MetaParameter] '=' value=LiteralExpression
		public Group getGroup() { return cGroup; }
		
		//'meta'
		public Keyword getMetaKeyword_0() { return cMetaKeyword_0; }
		
		//parameter=[MetaParameter]
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }
		
		//[MetaParameter]
		public CrossReference getParameterMetaParameterCrossReference_1_0() { return cParameterMetaParameterCrossReference_1_0; }
		
		//ID
		public RuleCall getParameterMetaParameterIDTerminalRuleCall_1_0_1() { return cParameterMetaParameterIDTerminalRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=LiteralExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//LiteralExpression
		public RuleCall getValueLiteralExpressionParserRuleCall_3_0() { return cValueLiteralExpressionParserRuleCall_3_0; }
	}
	public class SolutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Solution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_2_0 = (RuleCall)cAssignmentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Solution
		//Solution:
		//	'solution' '{'
		//	assignments+=Assignment+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'solution' '{' assignments+=Assignment+ '}'
		public Group getGroup() { return cGroup; }
		
		//'solution'
		public Keyword getSolutionKeyword_0() { return cSolutionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//assignments+=Assignment+
		public Assignment getAssignmentsAssignment_2() { return cAssignmentsAssignment_2; }
		
		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_2_0() { return cAssignmentsAssignmentParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cRequestAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cRequestRequestCrossReference_0_0_0 = (CrossReference)cRequestAssignment_0_0.eContents().get(0);
		private final RuleCall cRequestRequestIDTerminalRuleCall_0_0_0_1 = (RuleCall)cRequestRequestCrossReference_0_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cImplementationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImplementationImplementationCrossReference_1_0 = (CrossReference)cImplementationAssignment_1.eContents().get(0);
		private final RuleCall cImplementationImplementationIDTerminalRuleCall_1_0_1 = (RuleCall)cImplementationImplementationCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResourceMappingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResourceMappingsResourceMappingParserRuleCall_3_0 = (RuleCall)cResourceMappingsAssignment_3.eContents().get(0);
		private final Assignment cComponentMappingsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentMappingsComponentMappingParserRuleCall_4_0 = (RuleCall)cComponentMappingsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Assignment:
		//	(request=[Request] '->')? implementation=[Implementation] '{'
		//	resourceMappings+=ResourceMapping+
		//	componentMappings+=ComponentMapping*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//(request=[Request] '->')? implementation=[Implementation] '{' resourceMappings+=ResourceMapping+
		//componentMappings+=ComponentMapping* '}'
		public Group getGroup() { return cGroup; }
		
		//(request=[Request] '->')?
		public Group getGroup_0() { return cGroup_0; }
		
		//request=[Request]
		public Assignment getRequestAssignment_0_0() { return cRequestAssignment_0_0; }
		
		//[Request]
		public CrossReference getRequestRequestCrossReference_0_0_0() { return cRequestRequestCrossReference_0_0_0; }
		
		//ID
		public RuleCall getRequestRequestIDTerminalRuleCall_0_0_0_1() { return cRequestRequestIDTerminalRuleCall_0_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }
		
		//implementation=[Implementation]
		public Assignment getImplementationAssignment_1() { return cImplementationAssignment_1; }
		
		//[Implementation]
		public CrossReference getImplementationImplementationCrossReference_1_0() { return cImplementationImplementationCrossReference_1_0; }
		
		//ID
		public RuleCall getImplementationImplementationIDTerminalRuleCall_1_0_1() { return cImplementationImplementationIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//resourceMappings+=ResourceMapping+
		public Assignment getResourceMappingsAssignment_3() { return cResourceMappingsAssignment_3; }
		
		//ResourceMapping
		public RuleCall getResourceMappingsResourceMappingParserRuleCall_3_0() { return cResourceMappingsResourceMappingParserRuleCall_3_0; }
		
		//componentMappings+=ComponentMapping*
		public Assignment getComponentMappingsAssignment_4() { return cComponentMappingsAssignment_4; }
		
		//ComponentMapping
		public RuleCall getComponentMappingsComponentMappingParserRuleCall_4_0() { return cComponentMappingsComponentMappingParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ResourceMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ResourceMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredResourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRequiredResourceInstanceCrossReference_0_0 = (CrossReference)cRequiredResourceAssignment_0.eContents().get(0);
		private final RuleCall cRequiredResourceInstanceIDTerminalRuleCall_0_0_1 = (RuleCall)cRequiredResourceInstanceCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUsedResourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cUsedResourceResourceCrossReference_2_0 = (CrossReference)cUsedResourceAssignment_2.eContents().get(0);
		private final RuleCall cUsedResourceResourceIDTerminalRuleCall_2_0_1 = (RuleCall)cUsedResourceResourceCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSubMappingsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSubMappingsResourceMappingParserRuleCall_3_1_0 = (RuleCall)cSubMappingsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ResourceMapping:
		//	requiredResource=[Instance] '->' usedResource=[Resource] ('{'
		//	subMappings+=ResourceMapping+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//requiredResource=[Instance] '->' usedResource=[Resource] ('{' subMappings+=ResourceMapping+ '}')?
		public Group getGroup() { return cGroup; }
		
		//requiredResource=[Instance]
		public Assignment getRequiredResourceAssignment_0() { return cRequiredResourceAssignment_0; }
		
		//[Instance]
		public CrossReference getRequiredResourceInstanceCrossReference_0_0() { return cRequiredResourceInstanceCrossReference_0_0; }
		
		//ID
		public RuleCall getRequiredResourceInstanceIDTerminalRuleCall_0_0_1() { return cRequiredResourceInstanceIDTerminalRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//usedResource=[Resource]
		public Assignment getUsedResourceAssignment_2() { return cUsedResourceAssignment_2; }
		
		//[Resource]
		public CrossReference getUsedResourceResourceCrossReference_2_0() { return cUsedResourceResourceCrossReference_2_0; }
		
		//ID
		public RuleCall getUsedResourceResourceIDTerminalRuleCall_2_0_1() { return cUsedResourceResourceIDTerminalRuleCall_2_0_1; }
		
		//('{' subMappings+=ResourceMapping+ '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//subMappings+=ResourceMapping+
		public Assignment getSubMappingsAssignment_3_1() { return cSubMappingsAssignment_3_1; }
		
		//ResourceMapping
		public RuleCall getSubMappingsResourceMappingParserRuleCall_3_1_0() { return cSubMappingsResourceMappingParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ComponentMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ComponentMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cComponentInstanceCrossReference_0_0 = (CrossReference)cComponentAssignment_0.eContents().get(0);
		private final RuleCall cComponentInstanceIDTerminalRuleCall_0_0_1 = (RuleCall)cComponentInstanceCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentAssignmentParserRuleCall_2_0 = (RuleCall)cAssignmentAssignment_2.eContents().get(0);
		
		//ComponentMapping:
		//	component=[Instance] '-->' assignment=Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//component=[Instance] '-->' assignment=Assignment
		public Group getGroup() { return cGroup; }
		
		//component=[Instance]
		public Assignment getComponentAssignment_0() { return cComponentAssignment_0; }
		
		//[Instance]
		public CrossReference getComponentInstanceCrossReference_0_0() { return cComponentInstanceCrossReference_0_0; }
		
		//ID
		public RuleCall getComponentInstanceIDTerminalRuleCall_0_0_1() { return cComponentInstanceIDTerminalRuleCall_0_0_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1; }
		
		//assignment=Assignment
		public Assignment getAssignmentAssignment_2() { return cAssignmentAssignment_2; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_2_0() { return cAssignmentAssignmentParserRuleCall_2_0; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double ecore::EDouble:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	public class ClauseTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ClauseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRequiringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRequiringRequiringKeyword_0_0 = (Keyword)cRequiringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cProvidingEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cProvidingProvidingKeyword_1_0 = (Keyword)cProvidingEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ClauseType:
		//	requiring | providing;
		public EnumRule getRule() { return rule; }
		
		//requiring | providing
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//requiring
		public EnumLiteralDeclaration getRequiringEnumLiteralDeclaration_0() { return cRequiringEnumLiteralDeclaration_0; }
		
		//"requiring"
		public Keyword getRequiringRequiringKeyword_0_0() { return cRequiringRequiringKeyword_0_0; }
		
		//providing
		public EnumLiteralDeclaration getProvidingEnumLiteralDeclaration_1() { return cProvidingEnumLiteralDeclaration_1; }
		
		//"providing"
		public Keyword getProvidingProvidingKeyword_1_0() { return cProvidingProvidingKeyword_1_0; }
	}
	public class ClauseComparatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ClauseComparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLTLessThanSignKeyword_0_0 = (Keyword)cLTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLELessThanSignEqualsSignKeyword_1_0 = (Keyword)cLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQEqualsSignKeyword_2_0 = (Keyword)cEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNEExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGTGreaterThanSignKeyword_5_0 = (Keyword)cGTEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ClauseComparator:
		//	LT='<' | LE='<=' | EQ='=' | NE='!=' | GE='>=' | GT='>';
		public EnumRule getRule() { return rule; }
		
		//LT='<' | LE='<=' | EQ='=' | NE='!=' | GE='>=' | GT='>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LT='<'
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_0() { return cLTEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLTLessThanSignKeyword_0_0() { return cLTLessThanSignKeyword_0_0; }
		
		//LE='<='
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_1() { return cLEEnumLiteralDeclaration_1; }
		
		//'<='
		public Keyword getLELessThanSignEqualsSignKeyword_1_0() { return cLELessThanSignEqualsSignKeyword_1_0; }
		
		//EQ='='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_2() { return cEQEnumLiteralDeclaration_2; }
		
		//'='
		public Keyword getEQEqualsSignKeyword_2_0() { return cEQEqualsSignKeyword_2_0; }
		
		//NE='!='
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_3() { return cNEEnumLiteralDeclaration_3; }
		
		//'!='
		public Keyword getNEExclamationMarkEqualsSignKeyword_3_0() { return cNEExclamationMarkEqualsSignKeyword_3_0; }
		
		//GE='>='
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_4() { return cGEEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getGEGreaterThanSignEqualsSignKeyword_4_0() { return cGEGreaterThanSignEqualsSignKeyword_4_0; }
		
		//GT='>'
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_5() { return cGTEnumLiteralDeclaration_5; }
		
		//'>'
		public Keyword getGTGreaterThanSignKeyword_5_0() { return cGTGreaterThanSignKeyword_5_0; }
	}
	public class PropertyAggregationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PropertyAggregation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSumEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSumSumKeyword_0_0 = (Keyword)cSumEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaxMaxKeyword_1_0 = (Keyword)cMaxEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PropertyAggregation:
		//	sum | max;
		public EnumRule getRule() { return rule; }
		
		//sum | max
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sum
		public EnumLiteralDeclaration getSumEnumLiteralDeclaration_0() { return cSumEnumLiteralDeclaration_0; }
		
		//"sum"
		public Keyword getSumSumKeyword_0_0() { return cSumSumKeyword_0_0; }
		
		//max
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_1() { return cMaxEnumLiteralDeclaration_1; }
		
		//"max"
		public Keyword getMaxMaxKeyword_1_0() { return cMaxMaxKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final HardwareModelElements pHardwareModel;
	private final ResourceTypeElements pResourceType;
	private final ResourceElements pResource;
	private final CurrentResourceValueElements pCurrentResourceValue;
	private final SoftwareModelElements pSoftwareModel;
	private final MetaParameterElements pMetaParameter;
	private final PropertyElements pProperty;
	private final ComponentElements pComponent;
	private final ImplementationElements pImplementation;
	private final InstanceElements pInstance;
	private final ComponentRequirementElements pComponentRequirement;
	private final ResourceRequirementElements pResourceRequirement;
	private final ClauseElements pClause;
	private final ClauseTypeElements eClauseType;
	private final ClauseComparatorElements eClauseComparator;
	private final RequestElements pRequest;
	private final ObjectiveElements pObjective;
	private final PropertyAggregationElements ePropertyAggregation;
	private final ExpressionElements pExpression;
	private final BinaryExpressionElements pBinaryExpression;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PowerElements pPower;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final DesignatorElements pDesignator;
	private final PropertyDesignatorElements pPropertyDesignator;
	private final PropertyDesignatorWithOptionalInstanceElements pPropertyDesignatorWithOptionalInstance;
	private final MetaParameterDesignatorElements pMetaParameterDesignator;
	private final LiteralExpressionElements pLiteralExpression;
	private final MetaParameterAssignmentElements pMetaParameterAssignment;
	private final SolutionElements pSolution;
	private final AssignmentElements pAssignment;
	private final ResourceMappingElements pResourceMapping;
	private final ComponentMappingElements pComponentMapping;
	private final TerminalRule tUNIT;
	private final DoubleElements pDouble;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pHardwareModel = new HardwareModelElements();
		this.pResourceType = new ResourceTypeElements();
		this.pResource = new ResourceElements();
		this.pCurrentResourceValue = new CurrentResourceValueElements();
		this.pSoftwareModel = new SoftwareModelElements();
		this.pMetaParameter = new MetaParameterElements();
		this.pProperty = new PropertyElements();
		this.pComponent = new ComponentElements();
		this.pImplementation = new ImplementationElements();
		this.pInstance = new InstanceElements();
		this.pComponentRequirement = new ComponentRequirementElements();
		this.pResourceRequirement = new ResourceRequirementElements();
		this.pClause = new ClauseElements();
		this.eClauseType = new ClauseTypeElements();
		this.eClauseComparator = new ClauseComparatorElements();
		this.pRequest = new RequestElements();
		this.pObjective = new ObjectiveElements();
		this.ePropertyAggregation = new PropertyAggregationElements();
		this.pExpression = new ExpressionElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPower = new PowerElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pDesignator = new DesignatorElements();
		this.pPropertyDesignator = new PropertyDesignatorElements();
		this.pPropertyDesignatorWithOptionalInstance = new PropertyDesignatorWithOptionalInstanceElements();
		this.pMetaParameterDesignator = new MetaParameterDesignatorElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pMetaParameterAssignment = new MetaParameterAssignmentElements();
		this.pSolution = new SolutionElements();
		this.pAssignment = new AssignmentElements();
		this.pResourceMapping = new ResourceMappingElements();
		this.pComponentMapping = new ComponentMappingElements();
		this.tUNIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNIT");
		this.pDouble = new DoubleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	hardwareModel=HardwareModel
	//	softwareModel=SoftwareModel
	//	requests+=Request+
	//	objective=Objective
	//	solution=Solution?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// HardwareModel (HW package)
	//HardwareModel:
	//	properties+=Property*
	//	resourceTypes+=ResourceType+
	//	resources+=Resource+;
	public HardwareModelElements getHardwareModelAccess() {
		return pHardwareModel;
	}
	
	public ParserRule getHardwareModelRule() {
		return getHardwareModelAccess().getRule();
	}
	
	//ResourceType:
	//	container?='container'? 'resource' 'type' name=ID '{'
	//	// TODO Would need to add a validation to make sure that only containers contain other resources
	//	resourceTypes+=ResourceType*
	//	// TODO Would need to add a validation to make sure that containers contain no properties
	//	properties+=Property* ('using' 'property' propertyReferences+=[Property])*
	//	'}';
	public ResourceTypeElements getResourceTypeAccess() {
		return pResourceType;
	}
	
	public ParserRule getResourceTypeRule() {
		return getResourceTypeAccess().getRule();
	}
	
	//Resource:
	//	'resource' name=ID ':' type=[ResourceType] '{'
	//	resources+=Resource*
	//	values+=CurrentResourceValue*
	//	'}';
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//CurrentResourceValue:
	//	property=[Property] '=' value=LiteralExpression;
	public CurrentResourceValueElements getCurrentResourceValueAccess() {
		return pCurrentResourceValue;
	}
	
	public ParserRule getCurrentResourceValueRule() {
		return getCurrentResourceValueAccess().getRule();
	}
	
	//// SoftwareModel (SW Package)
	//SoftwareModel:
	//	(properties+=Property | parameters+=MetaParameter)*
	//	components+=Component+;
	public SoftwareModelElements getSoftwareModelAccess() {
		return pSoftwareModel;
	}
	
	public ParserRule getSoftwareModelRule() {
		return getSoftwareModelAccess().getRule();
	}
	
	//MetaParameter:
	//	'meta' name=ID;
	public MetaParameterElements getMetaParameterAccess() {
		return pMetaParameter;
	}
	
	public ParserRule getMetaParameterRule() {
		return getMetaParameterAccess().getRule();
	}
	
	//Property:
	//	'property' name=ID unit=UNIT;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Component:
	//	'component' name=ID '{' ('using' 'property' usedProperties+=[Property])*
	//	implementations+=Implementation+ ('using' 'property' usedProperties+=[Property])*
	//	'}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Implementation:
	//	'contract' name=ID '{'
	//	componentRequirements+=ComponentRequirement*
	//	resourceRequirements+=ResourceRequirement+
	//	clauses+=Clause+
	//	'}';
	public ImplementationElements getImplementationAccess() {
		return pImplementation;
	}
	
	public ParserRule getImplementationRule() {
		return getImplementationAccess().getRule();
	}
	
	//Instance:
	//	name=ID;
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}
	
	//ComponentRequirement:
	//	'requires component' instance=Instance 'of' 'type' type=[Component];
	public ComponentRequirementElements getComponentRequirementAccess() {
		return pComponentRequirement;
	}
	
	public ParserRule getComponentRequirementRule() {
		return getComponentRequirementAccess().getRule();
	}
	
	//ResourceRequirement:
	//	'requires resource'? instance=Instance 'of' 'type' type=[ResourceType] ('with' '{'
	//	resourceRequirements+=ResourceRequirement+
	//	'}')?;
	public ResourceRequirementElements getResourceRequirementAccess() {
		return pResourceRequirement;
	}
	
	public ParserRule getResourceRequirementRule() {
		return getResourceRequirementAccess().getRule();
	}
	
	//Clause:
	//	type=ClauseType LHS= /*Designator*/ PropertyDesignatorWithOptionalInstance comp=ClauseComparator RHS=Expression;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//enum ClauseType:
	//	requiring | providing;
	public ClauseTypeElements getClauseTypeAccess() {
		return eClauseType;
	}
	
	public EnumRule getClauseTypeRule() {
		return getClauseTypeAccess().getRule();
	}
	
	//enum ClauseComparator:
	//	LT='<' | LE='<=' | EQ='=' | NE='!=' | GE='>=' | GT='>';
	public ClauseComparatorElements getClauseComparatorAccess() {
		return eClauseComparator;
	}
	
	public EnumRule getClauseComparatorRule() {
		return getClauseComparatorAccess().getRule();
	}
	
	//Request:
	//	'request' name=ID 'for' component=[Component] '{'
	//	parameterAssignments+=MetaParameterAssignment*
	//	requirements+=Clause+
	//	'}';
	public RequestElements getRequestAccess() {
		return pRequest;
	}
	
	public ParserRule getRequestRule() {
		return getRequestAccess().getRule();
	}
	
	//Objective:
	//	'minimize' agg=PropertyAggregation '(' property=[Property] ')';
	public ObjectiveElements getObjectiveAccess() {
		return pObjective;
	}
	
	public ParserRule getObjectiveRule() {
		return getObjectiveAccess().getRule();
	}
	
	//enum PropertyAggregation:
	//	sum | max;
	public PropertyAggregationElements getPropertyAggregationAccess() {
		return ePropertyAggregation;
	}
	
	public EnumRule getPropertyAggregationRule() {
		return getPropertyAggregationAccess().getRule();
	}
	
	//// Expressions
	//Expression:
	//	Addition;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// TODO: This doesn't seem to do what we want it to...
	//BinaryExpression:
	//	{AddExpression} | {MultExpression} | {SubExpression} | {DivExpression} | {PowExpression};
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//Addition Expression:
	//	Multiplication (({AddExpression.left=current} '+' | {SubExpression.left=current} '-') right=Addition)?;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Power (({MultExpression.left=current} '*' | {DivExpression.left=current} '/') right=Multiplication)?;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Power Expression:
	//	PrimaryExpression ({PowExpression.left=current} '^' right=PrimaryExpression)?;
	public PowerElements getPowerAccess() {
		return pPower;
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	'(' Expression ')' | Designator | LiteralExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Designator:
	//	PropertyDesignator | MetaParameterDesignator;
	public DesignatorElements getDesignatorAccess() {
		return pDesignator;
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}
	
	//PropertyDesignator:
	//	instance=[Instance] '.' property=[Property];
	public PropertyDesignatorElements getPropertyDesignatorAccess() {
		return pPropertyDesignator;
	}
	
	public ParserRule getPropertyDesignatorRule() {
		return getPropertyDesignatorAccess().getRule();
	}
	
	//PropertyDesignatorWithOptionalInstance:
	//	(instance=[Instance] '.')? property=[Property];
	public PropertyDesignatorWithOptionalInstanceElements getPropertyDesignatorWithOptionalInstanceAccess() {
		return pPropertyDesignatorWithOptionalInstance;
	}
	
	public ParserRule getPropertyDesignatorWithOptionalInstanceRule() {
		return getPropertyDesignatorWithOptionalInstanceAccess().getRule();
	}
	
	//MetaParameterDesignator:
	//	metaParameter=[MetaParameter];
	public MetaParameterDesignatorElements getMetaParameterDesignatorAccess() {
		return pMetaParameterDesignator;
	}
	
	public ParserRule getMetaParameterDesignatorRule() {
		return getMetaParameterDesignatorAccess().getRule();
	}
	
	//LiteralExpression:
	//	value=Double;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//MetaParameterAssignment:
	//	'meta' parameter=[MetaParameter] '=' value=LiteralExpression;
	public MetaParameterAssignmentElements getMetaParameterAssignmentAccess() {
		return pMetaParameterAssignment;
	}
	
	public ParserRule getMetaParameterAssignmentRule() {
		return getMetaParameterAssignmentAccess().getRule();
	}
	
	//// Solution
	//Solution:
	//	'solution' '{'
	//	assignments+=Assignment+
	//	'}';
	public SolutionElements getSolutionAccess() {
		return pSolution;
	}
	
	public ParserRule getSolutionRule() {
		return getSolutionAccess().getRule();
	}
	
	//Assignment:
	//	(request=[Request] '->')? implementation=[Implementation] '{'
	//	resourceMappings+=ResourceMapping+
	//	componentMappings+=ComponentMapping*
	//	'}';
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//ResourceMapping:
	//	requiredResource=[Instance] '->' usedResource=[Resource] ('{'
	//	subMappings+=ResourceMapping+
	//	'}')?;
	public ResourceMappingElements getResourceMappingAccess() {
		return pResourceMapping;
	}
	
	public ParserRule getResourceMappingRule() {
		return getResourceMappingAccess().getRule();
	}
	
	//ComponentMapping:
	//	component=[Instance] '-->' assignment=Assignment;
	public ComponentMappingElements getComponentMappingAccess() {
		return pComponentMapping;
	}
	
	public ParserRule getComponentMappingRule() {
		return getComponentMappingAccess().getRule();
	}
	
	//terminal UNIT:
	//	'['->']';
	public TerminalRule getUNITRule() {
		return tUNIT;
	}
	
	//Double ecore::EDouble:
	//	INT '.' INT;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
