/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.MODEL: return createModel();
      case MyDslPackage.HARDWARE_MODEL: return createHardwareModel();
      case MyDslPackage.RESOURCE_TYPE: return createResourceType();
      case MyDslPackage.RESOURCE: return createResource();
      case MyDslPackage.CURRENT_RESOURCE_VALUE: return createCurrentResourceValue();
      case MyDslPackage.SOFTWARE_MODEL: return createSoftwareModel();
      case MyDslPackage.META_PARAMETER: return createMetaParameter();
      case MyDslPackage.PROPERTY: return createProperty();
      case MyDslPackage.COMPONENT: return createComponent();
      case MyDslPackage.IMPLEMENTATION: return createImplementation();
      case MyDslPackage.INSTANCE: return createInstance();
      case MyDslPackage.COMPONENT_REQUIREMENT: return createComponentRequirement();
      case MyDslPackage.RESOURCE_REQUIREMENT: return createResourceRequirement();
      case MyDslPackage.CLAUSE: return createClause();
      case MyDslPackage.REQUEST: return createRequest();
      case MyDslPackage.OBJECTIVE: return createObjective();
      case MyDslPackage.EXPRESSION: return createExpression();
      case MyDslPackage.BINARY_EXPRESSION: return createBinaryExpression();
      case MyDslPackage.DESIGNATOR: return createDesignator();
      case MyDslPackage.PROPERTY_DESIGNATOR: return createPropertyDesignator();
      case MyDslPackage.PROPERTY_DESIGNATOR_WITH_OPTIONAL_INSTANCE: return createPropertyDesignatorWithOptionalInstance();
      case MyDslPackage.META_PARAMETER_DESIGNATOR: return createMetaParameterDesignator();
      case MyDslPackage.LITERAL_EXPRESSION: return createLiteralExpression();
      case MyDslPackage.META_PARAMETER_ASSIGNMENT: return createMetaParameterAssignment();
      case MyDslPackage.SOLUTION: return createSolution();
      case MyDslPackage.ASSIGNMENT: return createAssignment();
      case MyDslPackage.RESOURCE_MAPPING: return createResourceMapping();
      case MyDslPackage.COMPONENT_MAPPING: return createComponentMapping();
      case MyDslPackage.ADD_EXPRESSION: return createAddExpression();
      case MyDslPackage.MULT_EXPRESSION: return createMultExpression();
      case MyDslPackage.SUB_EXPRESSION: return createSubExpression();
      case MyDslPackage.DIV_EXPRESSION: return createDivExpression();
      case MyDslPackage.POW_EXPRESSION: return createPowExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyDslPackage.CLAUSE_TYPE:
        return createClauseTypeFromString(eDataType, initialValue);
      case MyDslPackage.CLAUSE_COMPARATOR:
        return createClauseComparatorFromString(eDataType, initialValue);
      case MyDslPackage.PROPERTY_AGGREGATION:
        return createPropertyAggregationFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyDslPackage.CLAUSE_TYPE:
        return convertClauseTypeToString(eDataType, instanceValue);
      case MyDslPackage.CLAUSE_COMPARATOR:
        return convertClauseComparatorToString(eDataType, instanceValue);
      case MyDslPackage.PROPERTY_AGGREGATION:
        return convertPropertyAggregationToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HardwareModel createHardwareModel()
  {
    HardwareModelImpl hardwareModel = new HardwareModelImpl();
    return hardwareModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResourceType createResourceType()
  {
    ResourceTypeImpl resourceType = new ResourceTypeImpl();
    return resourceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Resource createResource()
  {
    ResourceImpl resource = new ResourceImpl();
    return resource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CurrentResourceValue createCurrentResourceValue()
  {
    CurrentResourceValueImpl currentResourceValue = new CurrentResourceValueImpl();
    return currentResourceValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SoftwareModel createSoftwareModel()
  {
    SoftwareModelImpl softwareModel = new SoftwareModelImpl();
    return softwareModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaParameter createMetaParameter()
  {
    MetaParameterImpl metaParameter = new MetaParameterImpl();
    return metaParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Implementation createImplementation()
  {
    ImplementationImpl implementation = new ImplementationImpl();
    return implementation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instance createInstance()
  {
    InstanceImpl instance = new InstanceImpl();
    return instance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentRequirement createComponentRequirement()
  {
    ComponentRequirementImpl componentRequirement = new ComponentRequirementImpl();
    return componentRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResourceRequirement createResourceRequirement()
  {
    ResourceRequirementImpl resourceRequirement = new ResourceRequirementImpl();
    return resourceRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clause createClause()
  {
    ClauseImpl clause = new ClauseImpl();
    return clause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Request createRequest()
  {
    RequestImpl request = new RequestImpl();
    return request;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Objective createObjective()
  {
    ObjectiveImpl objective = new ObjectiveImpl();
    return objective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryExpression createBinaryExpression()
  {
    BinaryExpressionImpl binaryExpression = new BinaryExpressionImpl();
    return binaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Designator createDesignator()
  {
    DesignatorImpl designator = new DesignatorImpl();
    return designator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PropertyDesignator createPropertyDesignator()
  {
    PropertyDesignatorImpl propertyDesignator = new PropertyDesignatorImpl();
    return propertyDesignator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PropertyDesignatorWithOptionalInstance createPropertyDesignatorWithOptionalInstance()
  {
    PropertyDesignatorWithOptionalInstanceImpl propertyDesignatorWithOptionalInstance = new PropertyDesignatorWithOptionalInstanceImpl();
    return propertyDesignatorWithOptionalInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaParameterDesignator createMetaParameterDesignator()
  {
    MetaParameterDesignatorImpl metaParameterDesignator = new MetaParameterDesignatorImpl();
    return metaParameterDesignator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LiteralExpression createLiteralExpression()
  {
    LiteralExpressionImpl literalExpression = new LiteralExpressionImpl();
    return literalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaParameterAssignment createMetaParameterAssignment()
  {
    MetaParameterAssignmentImpl metaParameterAssignment = new MetaParameterAssignmentImpl();
    return metaParameterAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Solution createSolution()
  {
    SolutionImpl solution = new SolutionImpl();
    return solution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResourceMapping createResourceMapping()
  {
    ResourceMappingImpl resourceMapping = new ResourceMappingImpl();
    return resourceMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentMapping createComponentMapping()
  {
    ComponentMappingImpl componentMapping = new ComponentMappingImpl();
    return componentMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AddExpression createAddExpression()
  {
    AddExpressionImpl addExpression = new AddExpressionImpl();
    return addExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MultExpression createMultExpression()
  {
    MultExpressionImpl multExpression = new MultExpressionImpl();
    return multExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubExpression createSubExpression()
  {
    SubExpressionImpl subExpression = new SubExpressionImpl();
    return subExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DivExpression createDivExpression()
  {
    DivExpressionImpl divExpression = new DivExpressionImpl();
    return divExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PowExpression createPowExpression()
  {
    PowExpressionImpl powExpression = new PowExpressionImpl();
    return powExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClauseType createClauseTypeFromString(EDataType eDataType, String initialValue)
  {
    ClauseType result = ClauseType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertClauseTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClauseComparator createClauseComparatorFromString(EDataType eDataType, String initialValue)
  {
    ClauseComparator result = ClauseComparator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertClauseComparatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PropertyAggregation createPropertyAggregationFromString(EDataType eDataType, String initialValue)
  {
    PropertyAggregation result = PropertyAggregation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPropertyAggregationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
