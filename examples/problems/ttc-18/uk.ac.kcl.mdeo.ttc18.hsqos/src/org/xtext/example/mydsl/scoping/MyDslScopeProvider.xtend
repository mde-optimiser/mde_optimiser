/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.scoping

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.SimpleNameProvider
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.xtext.example.mydsl.myDsl.Assignment
import org.xtext.example.mydsl.myDsl.Component
import org.xtext.example.mydsl.myDsl.ComponentRequirement
import org.xtext.example.mydsl.myDsl.CurrentResourceValue
import org.xtext.example.mydsl.myDsl.HardwareModel
import org.xtext.example.mydsl.myDsl.Implementation
import org.xtext.example.mydsl.myDsl.Instance
import org.xtext.example.mydsl.myDsl.Model
import org.xtext.example.mydsl.myDsl.PropertyDesignator
import org.xtext.example.mydsl.myDsl.PropertyDesignatorWithOptionalInstance
import org.xtext.example.mydsl.myDsl.Resource
import org.xtext.example.mydsl.myDsl.ResourceRequirement
import org.xtext.example.mydsl.myDsl.ResourceType

import static org.eclipse.xtext.scoping.Scopes.*

import static extension org.eclipse.emf.ecore.util.EcoreUtil.*
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.xtext.example.mydsl.myDsl.ResourceMapping
import org.xtext.example.mydsl.myDsl.ComponentMapping

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MyDslScopeProvider extends AbstractDeclarativeScopeProvider {

	@Inject
	val SimpleNameProvider simpleNameProvider = null

	def IScope scope_Resource_type(Resource context, EReference ref) {
		if (context.eContainer instanceof Resource) {
			scopeFor((context.eContainer as Resource).type.resourceTypes, simpleNameProvider, IScope.NULLSCOPE)
		} else {
			val hwModel = context.eContainer as HardwareModel
			scopeFor(hwModel.resourceTypes, simpleNameProvider, IScope.NULLSCOPE) 
		}
	}
	
	def IScope scope_ResourceRequirement_type(ResourceRequirement context, EReference ref) {
		if (context.eContainer instanceof ResourceRequirement) {
			scopeFor((context.eContainer as ResourceRequirement).type.resourceTypes, simpleNameProvider, IScope.NULLSCOPE)
		} else {
			var model = context.rootContainer as Model
			scopeFor(model.hardwareModel.resourceTypes, simpleNameProvider, IScope.NULLSCOPE)
		}
	}

	def IScope scope_CurrentResourceValue_property(CurrentResourceValue context, EReference ref) {
		val resourceType = (context.eContainer as Resource).type
		scopeFor(resourceType.allProperties, simpleNameProvider, IScope.NULLSCOPE)
	}
	
	def IScope scope_PropertyDesignator_instance(PropertyDesignator context, EReference ref) {
		val containingImplementation = context.getContainerOfType(Implementation)
		val allInstancesInScope = containingImplementation.getAllContentsOfType(Instance)
		scopeFor(allInstancesInScope, simpleNameProvider, IScope.NULLSCOPE)
	}
	
	def IScope scope_PropertyDesignator_property(PropertyDesignator context, EReference ref) {
		val instanceContext = context.instance.eContainer
		
		if (instanceContext instanceof ComponentRequirement) {
			scopeFor((instanceContext as ComponentRequirement).type.usedProperties, simpleNameProvider, IScope.NULLSCOPE)
		} else {
			scopeFor((instanceContext as ResourceRequirement).type.allProperties, simpleNameProvider, IScope.NULLSCOPE)			
		}
	}
	
	def IScope scope_PropertyDesignatorWithOptionalInstance_property(PropertyDesignatorWithOptionalInstance context, EReference ref) {
		if (context.instance !== null) {
			val instanceContext = context.instance.eContainer
			
			if (instanceContext instanceof ComponentRequirement) {
				scopeFor((instanceContext as ComponentRequirement).type.usedProperties, simpleNameProvider, IScope.NULLSCOPE)
			} else {
				scopeFor((instanceContext as ResourceRequirement).type.allProperties, simpleNameProvider, IScope.NULLSCOPE)			
			}
			
		} else {
			val containingComponent = context.getContainerOfType(Component)
			
			if (containingComponent !== null) {
				scopeFor(containingComponent.usedProperties, simpleNameProvider, IScope.NULLSCOPE)
			} else {
				val model = context.rootContainer as Model
				scopeFor(model.softwareModel.properties + model.hardwareModel.properties, simpleNameProvider, IScope.NULLSCOPE) 
			}
		}
	}
	
	def IScope scope_Assignment_implementation(Assignment context, EReference ref) {
		val componentScope =  if (context.request !== null) {
			                    context.request.component
			                  } else {
			                  	((context.eContainer as ComponentMapping).component.eContainer as ComponentRequirement).type
			                  }
			                  
		scopeFor(componentScope.implementations, simpleNameProvider, IScope.NULLSCOPE)
	}
	
	def IScope scope_ResourceMapping_requiredResource(ResourceMapping context, EReference ref) {
		val containingMapping = context.eContainer
		
		if (containingMapping instanceof ResourceMapping) {
			// Scope this in the context of the parent resource instance
			val containingResourceInstance = (containingMapping as ResourceMapping).requiredResource
			val containingRequirement = containingResourceInstance.eContainer as ResourceRequirement
			
			scopeFor(containingRequirement.resourceRequirements.map[rr | rr.instance], simpleNameProvider, IScope.NULLSCOPE)
		} else {
			// it's an assignment...
			val containingImplementation = (containingMapping as Assignment).implementation
			
			scopeFor(containingImplementation.resourceRequirements.map[rr | rr.instance], simpleNameProvider, IScope.NULLSCOPE)
		}
	}
	
	def IScope scope_ResourceMapping_usedResource(ResourceMapping context, EReference ref) {
		val containingMapping = context.eContainer
		
		if (containingMapping instanceof ResourceMapping) {
			// Scope this in the context of the parent resource
			val containingResource = (containingMapping as ResourceMapping).usedResource
			
			scopeFor(containingResource.resources, simpleNameProvider, IScope.NULLSCOPE)
		} else {
			// it's an assignment...
			val model = context.rootContainer as Model
			scopeFor(model.hardwareModel.resources, simpleNameProvider, IScope.NULLSCOPE)
		}
	}
	
	def IScope scope_ComponentMapping_component(ComponentMapping context, EReference ref) {
		val containingAssignment = context.eContainer as Assignment
		
		scopeFor(containingAssignment.implementation.componentRequirements.map[cr | cr.instance], simpleNameProvider, IScope.NULLSCOPE)
	}
	

	
//	def IScope scope_ComponentRequirement_type(Component context, EReference ref) {
//		
//		val softwareModel = context.getContainerOfType(SoftwareModel)	
//		return scopeFor(softwareModel.components, simpleNameProvider, IScope.NULLSCOPE)	
//
//	}
	
	private def Iterable<? extends EObject> getAllProperties(ResourceType resourceType) {
		resourceType.properties + resourceType.propertyReferences
	}
}
