grammar uk.ac.kcl.MDEOptimise with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate mdeoptimise "http://www.ac.uk/kcl/MDEOptimise"

Optimisation:
	basepath=BasePathSpec
	metamodel=MetaModelSpec
	model=ModelPathSpec
	objectives+=ObjectiveInterpreterSpec+
	constraints+=ConstraintInterpreterSpec*
	evolvers+=EvolverSpec+
	optimisation=OptimisationSpec
;

/**
 * Use this to identify a basepath to be set in the HenshinResourceSet so that Henshin 
 * transformations referencing file-based meta-models through relative paths will work 
 * correctly. This will happen mainly when working with dynamic instances rather than 
 * fully generated and registered metamodels. All further URLs should be either absolute 
 * or relative to this basepath.
 */
BasePathSpec:
	"basepath" location=URL
;

MetaModelSpec:
	"metamodel" location=URL
;

ModelPathSpec:
	"model" location=URL
;

ObjectiveInterpreterSpec:
	"objective" objectiveName=ValidID objectiveTendency=OBJECTIVE_TENDENCY objectiveType=ENTITY_TYPE "{" (objectiveSpec=STRING) "}"
;

ConstraintInterpreterSpec:
	"constraint" constraintName=ValidID constraintType=ENTITY_TYPE "{" (constraintSpec=STRING) "}"
;

EvolverSpec:
	evolverType=EvolverType "using" rule_location=URL
	         "unit" unit=STRING
	         ("parameters" '{'
					parameters+=EvolverParameter (',' parameters+=EvolverParameter)*
				'}')?
;

/**
 * TODO The custom function should ideally use a Jvm class parser, but it doesn't seem
 * to work with QualifiedName
 */
EvolverParameter:
	name=ValidID ('=>' (function=ParameterFunction | customFunction=STRING) )
;

ParameterFunction:
	name=ValidID ('(' 
		(parameter=STRING)
	')')?
; 

enum EvolverType:
    MUTATE='mutate' | BREED='breed';

OptimisationSpec:
	"optimisation" "provider" algorithmFactory=ALGORITHM_FACTORY
				"algorithm" algorithmName=ALGORITHM_NAME
				"variation" algorithmVariation=AlgorithmVariation
				"evolutions" algorithmEvolutions=INT
				"population" algorithmPopulation=INT
				("experiments" algorithmExperiments=INT)?
;

AlgorithmVariation:
	(probabilityVariation=ProbabilityVariation | simpleVariation=(MUTATION_VARIATION | CROSSOVER_VARIATION))
;

ProbabilityVariation:
	 type=GENETIC_VARIATION ('(' crossover_rate=Number ',' mutation_rate=Number ')')?
;

terminal GENETIC_VARIATION returns ecore::EString:
	'genetic'
;

terminal CROSSOVER_VARIATION returns ecore::EString:
	'crossover'
;

terminal MUTATION_VARIATION returns ecore::EString:
	'mutation'
;

terminal ALGORITHM_FACTORY returns ecore::EString:
	('moea'|'ecj')
;

//One initial algorithm - org.moeaframework.algorithm.StandardAlgorithms
//These should each require its own properties 
terminal ALGORITHM_NAME returns ecore::EString:
	('eMOEA' | 'eNSGAII' | 'NSGAII'| 'NSGAIII' | 'SPEA2')
;

terminal URL returns ecore::EString:
	'<' -> '>'
;

terminal OBJECTIVE_TENDENCY returns ecore::EString:
	('minimise'|'maximise')
;

terminal ENTITY_TYPE returns ecore::EString:
	('java'|'ocl')
;
