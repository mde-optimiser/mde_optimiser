/**
 * generated by Xtext 2.10.0
 */
package uk.ac.kcl.mdeoptimise.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.mdeoptimise.MdeoptimisePackage;
import uk.ac.kcl.mdeoptimise.ProbabilityVariation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Probability Variation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.mdeoptimise.impl.ProbabilityVariationImpl#getType <em>Type</em>}</li>
 *   <li>{@link uk.ac.kcl.mdeoptimise.impl.ProbabilityVariationImpl#getCrossover_rate <em>Crossover rate</em>}</li>
 *   <li>{@link uk.ac.kcl.mdeoptimise.impl.ProbabilityVariationImpl#getMutation_rate <em>Mutation rate</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProbabilityVariationImpl extends MinimalEObjectImpl.Container implements ProbabilityVariation
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getCrossover_rate() <em>Crossover rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCrossover_rate()
   * @generated
   * @ordered
   */
  protected static final String CROSSOVER_RATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCrossover_rate() <em>Crossover rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCrossover_rate()
   * @generated
   * @ordered
   */
  protected String crossover_rate = CROSSOVER_RATE_EDEFAULT;

  /**
   * The default value of the '{@link #getMutation_rate() <em>Mutation rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMutation_rate()
   * @generated
   * @ordered
   */
  protected static final String MUTATION_RATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMutation_rate() <em>Mutation rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMutation_rate()
   * @generated
   * @ordered
   */
  protected String mutation_rate = MUTATION_RATE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProbabilityVariationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MdeoptimisePackage.Literals.PROBABILITY_VARIATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.PROBABILITY_VARIATION__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCrossover_rate()
  {
    return crossover_rate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCrossover_rate(String newCrossover_rate)
  {
    String oldCrossover_rate = crossover_rate;
    crossover_rate = newCrossover_rate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.PROBABILITY_VARIATION__CROSSOVER_RATE, oldCrossover_rate, crossover_rate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMutation_rate()
  {
    return mutation_rate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMutation_rate(String newMutation_rate)
  {
    String oldMutation_rate = mutation_rate;
    mutation_rate = newMutation_rate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.PROBABILITY_VARIATION__MUTATION_RATE, oldMutation_rate, mutation_rate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.PROBABILITY_VARIATION__TYPE:
        return getType();
      case MdeoptimisePackage.PROBABILITY_VARIATION__CROSSOVER_RATE:
        return getCrossover_rate();
      case MdeoptimisePackage.PROBABILITY_VARIATION__MUTATION_RATE:
        return getMutation_rate();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.PROBABILITY_VARIATION__TYPE:
        setType((String)newValue);
        return;
      case MdeoptimisePackage.PROBABILITY_VARIATION__CROSSOVER_RATE:
        setCrossover_rate((String)newValue);
        return;
      case MdeoptimisePackage.PROBABILITY_VARIATION__MUTATION_RATE:
        setMutation_rate((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.PROBABILITY_VARIATION__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case MdeoptimisePackage.PROBABILITY_VARIATION__CROSSOVER_RATE:
        setCrossover_rate(CROSSOVER_RATE_EDEFAULT);
        return;
      case MdeoptimisePackage.PROBABILITY_VARIATION__MUTATION_RATE:
        setMutation_rate(MUTATION_RATE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.PROBABILITY_VARIATION__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case MdeoptimisePackage.PROBABILITY_VARIATION__CROSSOVER_RATE:
        return CROSSOVER_RATE_EDEFAULT == null ? crossover_rate != null : !CROSSOVER_RATE_EDEFAULT.equals(crossover_rate);
      case MdeoptimisePackage.PROBABILITY_VARIATION__MUTATION_RATE:
        return MUTATION_RATE_EDEFAULT == null ? mutation_rate != null : !MUTATION_RATE_EDEFAULT.equals(mutation_rate);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", crossover_rate: ");
    result.append(crossover_rate);
    result.append(", mutation_rate: ");
    result.append(mutation_rate);
    result.append(')');
    return result.toString();
  }

} //ProbabilityVariationImpl
