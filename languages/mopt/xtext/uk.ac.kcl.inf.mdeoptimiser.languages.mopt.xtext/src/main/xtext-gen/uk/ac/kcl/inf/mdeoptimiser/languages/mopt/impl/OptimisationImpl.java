/**
 * generated by Xtext 2.17.0
 */
package uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.GoalSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MoptPackage;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.Optimisation;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ProblemSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.SearchSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.SolverSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Optimisation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.OptimisationImpl#getProblem <em>Problem</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.OptimisationImpl#getGoal <em>Goal</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.OptimisationImpl#getSearch <em>Search</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.OptimisationImpl#getSolver <em>Solver</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OptimisationImpl extends MinimalEObjectImpl.Container implements Optimisation
{
  /**
   * The cached value of the '{@link #getProblem() <em>Problem</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProblem()
   * @generated
   * @ordered
   */
  protected ProblemSpec problem;

  /**
   * The cached value of the '{@link #getGoal() <em>Goal</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGoal()
   * @generated
   * @ordered
   */
  protected GoalSpec goal;

  /**
   * The cached value of the '{@link #getSearch() <em>Search</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSearch()
   * @generated
   * @ordered
   */
  protected SearchSpec search;

  /**
   * The cached value of the '{@link #getSolver() <em>Solver</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSolver()
   * @generated
   * @ordered
   */
  protected SolverSpec solver;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OptimisationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoptPackage.Literals.OPTIMISATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProblemSpec getProblem()
  {
    return problem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProblem(ProblemSpec newProblem, NotificationChain msgs)
  {
    ProblemSpec oldProblem = problem;
    problem = newProblem;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.OPTIMISATION__PROBLEM, oldProblem, newProblem);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProblem(ProblemSpec newProblem)
  {
    if (newProblem != problem)
    {
      NotificationChain msgs = null;
      if (problem != null)
        msgs = ((InternalEObject)problem).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.OPTIMISATION__PROBLEM, null, msgs);
      if (newProblem != null)
        msgs = ((InternalEObject)newProblem).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.OPTIMISATION__PROBLEM, null, msgs);
      msgs = basicSetProblem(newProblem, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.OPTIMISATION__PROBLEM, newProblem, newProblem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoalSpec getGoal()
  {
    return goal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGoal(GoalSpec newGoal, NotificationChain msgs)
  {
    GoalSpec oldGoal = goal;
    goal = newGoal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.OPTIMISATION__GOAL, oldGoal, newGoal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGoal(GoalSpec newGoal)
  {
    if (newGoal != goal)
    {
      NotificationChain msgs = null;
      if (goal != null)
        msgs = ((InternalEObject)goal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.OPTIMISATION__GOAL, null, msgs);
      if (newGoal != null)
        msgs = ((InternalEObject)newGoal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.OPTIMISATION__GOAL, null, msgs);
      msgs = basicSetGoal(newGoal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.OPTIMISATION__GOAL, newGoal, newGoal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SearchSpec getSearch()
  {
    return search;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSearch(SearchSpec newSearch, NotificationChain msgs)
  {
    SearchSpec oldSearch = search;
    search = newSearch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.OPTIMISATION__SEARCH, oldSearch, newSearch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSearch(SearchSpec newSearch)
  {
    if (newSearch != search)
    {
      NotificationChain msgs = null;
      if (search != null)
        msgs = ((InternalEObject)search).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.OPTIMISATION__SEARCH, null, msgs);
      if (newSearch != null)
        msgs = ((InternalEObject)newSearch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.OPTIMISATION__SEARCH, null, msgs);
      msgs = basicSetSearch(newSearch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.OPTIMISATION__SEARCH, newSearch, newSearch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SolverSpec getSolver()
  {
    return solver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSolver(SolverSpec newSolver, NotificationChain msgs)
  {
    SolverSpec oldSolver = solver;
    solver = newSolver;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.OPTIMISATION__SOLVER, oldSolver, newSolver);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSolver(SolverSpec newSolver)
  {
    if (newSolver != solver)
    {
      NotificationChain msgs = null;
      if (solver != null)
        msgs = ((InternalEObject)solver).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.OPTIMISATION__SOLVER, null, msgs);
      if (newSolver != null)
        msgs = ((InternalEObject)newSolver).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.OPTIMISATION__SOLVER, null, msgs);
      msgs = basicSetSolver(newSolver, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.OPTIMISATION__SOLVER, newSolver, newSolver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoptPackage.OPTIMISATION__PROBLEM:
        return basicSetProblem(null, msgs);
      case MoptPackage.OPTIMISATION__GOAL:
        return basicSetGoal(null, msgs);
      case MoptPackage.OPTIMISATION__SEARCH:
        return basicSetSearch(null, msgs);
      case MoptPackage.OPTIMISATION__SOLVER:
        return basicSetSolver(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoptPackage.OPTIMISATION__PROBLEM:
        return getProblem();
      case MoptPackage.OPTIMISATION__GOAL:
        return getGoal();
      case MoptPackage.OPTIMISATION__SEARCH:
        return getSearch();
      case MoptPackage.OPTIMISATION__SOLVER:
        return getSolver();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoptPackage.OPTIMISATION__PROBLEM:
        setProblem((ProblemSpec)newValue);
        return;
      case MoptPackage.OPTIMISATION__GOAL:
        setGoal((GoalSpec)newValue);
        return;
      case MoptPackage.OPTIMISATION__SEARCH:
        setSearch((SearchSpec)newValue);
        return;
      case MoptPackage.OPTIMISATION__SOLVER:
        setSolver((SolverSpec)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoptPackage.OPTIMISATION__PROBLEM:
        setProblem((ProblemSpec)null);
        return;
      case MoptPackage.OPTIMISATION__GOAL:
        setGoal((GoalSpec)null);
        return;
      case MoptPackage.OPTIMISATION__SEARCH:
        setSearch((SearchSpec)null);
        return;
      case MoptPackage.OPTIMISATION__SOLVER:
        setSolver((SolverSpec)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoptPackage.OPTIMISATION__PROBLEM:
        return problem != null;
      case MoptPackage.OPTIMISATION__GOAL:
        return goal != null;
      case MoptPackage.OPTIMISATION__SEARCH:
        return search != null;
      case MoptPackage.OPTIMISATION__SOLVER:
        return solver != null;
    }
    return super.eIsSet(featureID);
  }

} //OptimisationImpl
