/*
 * generated by Xtext 2.17.0
 */
package uk.ac.kcl.inf.mdeoptimiser.languages.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MoptGrammarAccess extends AbstractGrammarElementFinder {
	
	public class OptimisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.Optimisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProblemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProblemProblemSpecParserRuleCall_0_0 = (RuleCall)cProblemAssignment_0.eContents().get(0);
		private final Assignment cGoalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGoalGoalSpecParserRuleCall_1_0 = (RuleCall)cGoalAssignment_1.eContents().get(0);
		private final Assignment cSearchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSearchSearchSpecParserRuleCall_2_0 = (RuleCall)cSearchAssignment_2.eContents().get(0);
		private final Assignment cSolverAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSolverSolverSpecParserRuleCall_3_0 = (RuleCall)cSolverAssignment_3.eContents().get(0);
		
		//Optimisation:
		//	problem=ProblemSpec
		//	goal=GoalSpec
		//	search=SearchSpec
		//	solver=SolverSpec;
		@Override public ParserRule getRule() { return rule; }
		
		//problem=ProblemSpec goal=GoalSpec search=SearchSpec solver=SolverSpec
		public Group getGroup() { return cGroup; }
		
		//problem=ProblemSpec
		public Assignment getProblemAssignment_0() { return cProblemAssignment_0; }
		
		//ProblemSpec
		public RuleCall getProblemProblemSpecParserRuleCall_0_0() { return cProblemProblemSpecParserRuleCall_0_0; }
		
		//goal=GoalSpec
		public Assignment getGoalAssignment_1() { return cGoalAssignment_1; }
		
		//GoalSpec
		public RuleCall getGoalGoalSpecParserRuleCall_1_0() { return cGoalGoalSpecParserRuleCall_1_0; }
		
		//search=SearchSpec
		public Assignment getSearchAssignment_2() { return cSearchAssignment_2; }
		
		//SearchSpec
		public RuleCall getSearchSearchSpecParserRuleCall_2_0() { return cSearchSearchSpecParserRuleCall_2_0; }
		
		//solver=SolverSpec
		public Assignment getSolverAssignment_3() { return cSolverAssignment_3; }
		
		//SolverSpec
		public RuleCall getSolverSolverSpecParserRuleCall_3_0() { return cSolverSolverSpecParserRuleCall_3_0; }
	}
	public class ProblemSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ProblemSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProblemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBasepathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBasepathBasePathSpecParserRuleCall_2_0 = (RuleCall)cBasepathAssignment_2.eContents().get(0);
		private final Assignment cMetamodelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetamodelMetaModelSpecParserRuleCall_3_0 = (RuleCall)cMetamodelAssignment_3.eContents().get(0);
		private final Assignment cModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelModelPathSpecParserRuleCall_4_0 = (RuleCall)cModelAssignment_4.eContents().get(0);
		private final Assignment cModelInitialiserAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cModelInitialiserModelInitialiserSpecParserRuleCall_5_0 = (RuleCall)cModelInitialiserAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProblemSpec:
		//	"problem" "{"
		//	basepath=BasePathSpec
		//	metamodel=MetaModelSpec
		//	model=ModelPathSpec
		//	modelInitialiser=ModelInitialiserSpec?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"problem" "{" basepath=BasePathSpec metamodel=MetaModelSpec model=ModelPathSpec modelInitialiser=ModelInitialiserSpec?
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"problem"
		public Keyword getProblemKeyword_0() { return cProblemKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//basepath=BasePathSpec
		public Assignment getBasepathAssignment_2() { return cBasepathAssignment_2; }
		
		//BasePathSpec
		public RuleCall getBasepathBasePathSpecParserRuleCall_2_0() { return cBasepathBasePathSpecParserRuleCall_2_0; }
		
		//metamodel=MetaModelSpec
		public Assignment getMetamodelAssignment_3() { return cMetamodelAssignment_3; }
		
		//MetaModelSpec
		public RuleCall getMetamodelMetaModelSpecParserRuleCall_3_0() { return cMetamodelMetaModelSpecParserRuleCall_3_0; }
		
		//model=ModelPathSpec
		public Assignment getModelAssignment_4() { return cModelAssignment_4; }
		
		//ModelPathSpec
		public RuleCall getModelModelPathSpecParserRuleCall_4_0() { return cModelModelPathSpecParserRuleCall_4_0; }
		
		//modelInitialiser=ModelInitialiserSpec?
		public Assignment getModelInitialiserAssignment_5() { return cModelInitialiserAssignment_5; }
		
		//ModelInitialiserSpec
		public RuleCall getModelInitialiserModelInitialiserSpecParserRuleCall_5_0() { return cModelInitialiserModelInitialiserSpecParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class GoalSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.GoalSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefinementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefinementsMultiplicityRefinementSpecParserRuleCall_2_0 = (RuleCall)cRefinementsAssignment_2.eContents().get(0);
		private final Assignment cObjectivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectivesObjectiveInterpreterSpecParserRuleCall_3_0 = (RuleCall)cObjectivesAssignment_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstraintsConstraintInterpreterSpecParserRuleCall_4_0 = (RuleCall)cConstraintsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GoalSpec:
		//	"goal" "{"
		//	refinements+=MultiplicityRefinementSpec*
		//	objectives+=ObjectiveInterpreterSpec+
		//	constraints+=ConstraintInterpreterSpec*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"goal" "{" refinements+=MultiplicityRefinementSpec* objectives+=ObjectiveInterpreterSpec+
		//constraints+=ConstraintInterpreterSpec* "}"
		public Group getGroup() { return cGroup; }
		
		//"goal"
		public Keyword getGoalKeyword_0() { return cGoalKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//refinements+=MultiplicityRefinementSpec*
		public Assignment getRefinementsAssignment_2() { return cRefinementsAssignment_2; }
		
		//MultiplicityRefinementSpec
		public RuleCall getRefinementsMultiplicityRefinementSpecParserRuleCall_2_0() { return cRefinementsMultiplicityRefinementSpecParserRuleCall_2_0; }
		
		//objectives+=ObjectiveInterpreterSpec+
		public Assignment getObjectivesAssignment_3() { return cObjectivesAssignment_3; }
		
		//ObjectiveInterpreterSpec
		public RuleCall getObjectivesObjectiveInterpreterSpecParserRuleCall_3_0() { return cObjectivesObjectiveInterpreterSpecParserRuleCall_3_0; }
		
		//constraints+=ConstraintInterpreterSpec*
		public Assignment getConstraintsAssignment_4() { return cConstraintsAssignment_4; }
		
		//ConstraintInterpreterSpec
		public RuleCall getConstraintsConstraintInterpreterSpecParserRuleCall_4_0() { return cConstraintsConstraintInterpreterSpecParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SearchSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.SearchSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReportsReportInterpreterSpecParserRuleCall_2_0 = (RuleCall)cReportsAssignment_2.eContents().get(0);
		private final Assignment cEvolversAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEvolversEvolverSpecParserRuleCall_3_0 = (RuleCall)cEvolversAssignment_3.eContents().get(0);
		private final Assignment cRulegenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulegenRulegenSpecParserRuleCall_4_0 = (RuleCall)cRulegenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SearchSpec:
		//	"search" "{"
		//	reports+=ReportInterpreterSpec*
		//	evolvers+=EvolverSpec*
		//	rulegen+=RulegenSpec*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"search" "{" reports+=ReportInterpreterSpec* evolvers+=EvolverSpec* rulegen+=RulegenSpec* "}"
		public Group getGroup() { return cGroup; }
		
		//"search"
		public Keyword getSearchKeyword_0() { return cSearchKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//reports+=ReportInterpreterSpec*
		public Assignment getReportsAssignment_2() { return cReportsAssignment_2; }
		
		//ReportInterpreterSpec
		public RuleCall getReportsReportInterpreterSpecParserRuleCall_2_0() { return cReportsReportInterpreterSpecParserRuleCall_2_0; }
		
		//evolvers+=EvolverSpec*
		public Assignment getEvolversAssignment_3() { return cEvolversAssignment_3; }
		
		//EvolverSpec
		public RuleCall getEvolversEvolverSpecParserRuleCall_3_0() { return cEvolversEvolverSpecParserRuleCall_3_0; }
		
		//rulegen+=RulegenSpec*
		public Assignment getRulegenAssignment_4() { return cRulegenAssignment_4; }
		
		//RulegenSpec
		public RuleCall getRulegenRulegenSpecParserRuleCall_4_0() { return cRulegenRulegenSpecParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SolverSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.SolverSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolverKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEngineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSolverEngineAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSolverEngineSOLVER_ENGINETerminalRuleCall_2_1_0 = (RuleCall)cSolverEngineAssignment_2_1.eContents().get(0);
		private final Keyword cOptimisationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cProviderKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAlgorithmFactoryAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAlgorithmFactoryALGORITHM_FACTORYTerminalRuleCall_5_0 = (RuleCall)cAlgorithmFactoryAssignment_5.eContents().get(0);
		private final Keyword cAlgorithmKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAlgorithmAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAlgorithmAlgorithmSpecParserRuleCall_7_0 = (RuleCall)cAlgorithmAssignment_7.eContents().get(0);
		private final Keyword cTerminationKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTerminationConditionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTerminationConditionTerminationConditionSpecParserRuleCall_9_0 = (RuleCall)cTerminationConditionAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cParameterKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cSearchKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cParameterSearchAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cParameterSearchParameterSearchSpecParserRuleCall_10_2_0 = (RuleCall)cParameterSearchAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cBatchesKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cAlgorithmBatchesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cAlgorithmBatchesINTTerminalRuleCall_11_1_0 = (RuleCall)cAlgorithmBatchesAssignment_11_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//SolverSpec:
		//	"solver" "{" ("engine" solverEngine=SOLVER_ENGINE)?
		//	"optimisation" "provider" algorithmFactory=ALGORITHM_FACTORY
		//	"algorithm" algorithm=AlgorithmSpec
		//	"termination" terminationCondition=TerminationConditionSpec ("parameter" "search"
		//	parameterSearch=ParameterSearchSpec)? ("batches" algorithmBatches=INT)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"solver" "{" ("engine" solverEngine=SOLVER_ENGINE)? "optimisation" "provider" algorithmFactory=ALGORITHM_FACTORY
		//"algorithm" algorithm=AlgorithmSpec "termination" terminationCondition=TerminationConditionSpec ("parameter" "search"
		//parameterSearch=ParameterSearchSpec)? ("batches" algorithmBatches=INT)? "}"
		public Group getGroup() { return cGroup; }
		
		//"solver"
		public Keyword getSolverKeyword_0() { return cSolverKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//("engine" solverEngine=SOLVER_ENGINE)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"engine"
		public Keyword getEngineKeyword_2_0() { return cEngineKeyword_2_0; }
		
		//solverEngine=SOLVER_ENGINE
		public Assignment getSolverEngineAssignment_2_1() { return cSolverEngineAssignment_2_1; }
		
		//SOLVER_ENGINE
		public RuleCall getSolverEngineSOLVER_ENGINETerminalRuleCall_2_1_0() { return cSolverEngineSOLVER_ENGINETerminalRuleCall_2_1_0; }
		
		//"optimisation"
		public Keyword getOptimisationKeyword_3() { return cOptimisationKeyword_3; }
		
		//"provider"
		public Keyword getProviderKeyword_4() { return cProviderKeyword_4; }
		
		//algorithmFactory=ALGORITHM_FACTORY
		public Assignment getAlgorithmFactoryAssignment_5() { return cAlgorithmFactoryAssignment_5; }
		
		//ALGORITHM_FACTORY
		public RuleCall getAlgorithmFactoryALGORITHM_FACTORYTerminalRuleCall_5_0() { return cAlgorithmFactoryALGORITHM_FACTORYTerminalRuleCall_5_0; }
		
		//"algorithm"
		public Keyword getAlgorithmKeyword_6() { return cAlgorithmKeyword_6; }
		
		//algorithm=AlgorithmSpec
		public Assignment getAlgorithmAssignment_7() { return cAlgorithmAssignment_7; }
		
		//AlgorithmSpec
		public RuleCall getAlgorithmAlgorithmSpecParserRuleCall_7_0() { return cAlgorithmAlgorithmSpecParserRuleCall_7_0; }
		
		//"termination"
		public Keyword getTerminationKeyword_8() { return cTerminationKeyword_8; }
		
		//terminationCondition=TerminationConditionSpec
		public Assignment getTerminationConditionAssignment_9() { return cTerminationConditionAssignment_9; }
		
		//TerminationConditionSpec
		public RuleCall getTerminationConditionTerminationConditionSpecParserRuleCall_9_0() { return cTerminationConditionTerminationConditionSpecParserRuleCall_9_0; }
		
		//("parameter" "search" parameterSearch=ParameterSearchSpec)?
		public Group getGroup_10() { return cGroup_10; }
		
		//"parameter"
		public Keyword getParameterKeyword_10_0() { return cParameterKeyword_10_0; }
		
		//"search"
		public Keyword getSearchKeyword_10_1() { return cSearchKeyword_10_1; }
		
		//parameterSearch=ParameterSearchSpec
		public Assignment getParameterSearchAssignment_10_2() { return cParameterSearchAssignment_10_2; }
		
		//ParameterSearchSpec
		public RuleCall getParameterSearchParameterSearchSpecParserRuleCall_10_2_0() { return cParameterSearchParameterSearchSpecParserRuleCall_10_2_0; }
		
		//("batches" algorithmBatches=INT)?
		public Group getGroup_11() { return cGroup_11; }
		
		//"batches"
		public Keyword getBatchesKeyword_11_0() { return cBatchesKeyword_11_0; }
		
		//algorithmBatches=INT
		public Assignment getAlgorithmBatchesAssignment_11_1() { return cAlgorithmBatchesAssignment_11_1; }
		
		//INT
		public RuleCall getAlgorithmBatchesINTTerminalRuleCall_11_1_0() { return cAlgorithmBatchesINTTerminalRuleCall_11_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class BasePathSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.BasePathSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasepathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocationURLTerminalRuleCall_1_0 = (RuleCall)cLocationAssignment_1.eContents().get(0);
		
		///**
		// * Use this to identify a basepath to be set in the HenshinResourceSet so that Henshin
		// * transformations referencing file-based meta-models through relative paths will work
		// * correctly. This will happen mainly when working with dynamic instances rather than
		// * fully generated and registered metamodels. All further URLs should be either absolute
		// * or relative to this basepath.
		// */ BasePathSpec:
		//	"basepath" location=URL;
		@Override public ParserRule getRule() { return rule; }
		
		//"basepath" location=URL
		public Group getGroup() { return cGroup; }
		
		//"basepath"
		public Keyword getBasepathKeyword_0() { return cBasepathKeyword_0; }
		
		//location=URL
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }
		
		//URL
		public RuleCall getLocationURLTerminalRuleCall_1_0() { return cLocationURLTerminalRuleCall_1_0; }
	}
	public class MetaModelSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.MetaModelSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocationURLTerminalRuleCall_1_0 = (RuleCall)cLocationAssignment_1.eContents().get(0);
		
		///**
		// * URL might be a file location, relative to basepath, in which case we load the metamodel dynamically.
		// * It may also be a dot-separated fully-qualified class name for a meta-model package, in which case we
		// * register that globally.
		// */ MetaModelSpec:
		//	"metamodel" location=URL;
		@Override public ParserRule getRule() { return rule; }
		
		//"metamodel" location=URL
		public Group getGroup() { return cGroup; }
		
		//"metamodel"
		public Keyword getMetamodelKeyword_0() { return cMetamodelKeyword_0; }
		
		//location=URL
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }
		
		//URL
		public RuleCall getLocationURLTerminalRuleCall_1_0() { return cLocationURLTerminalRuleCall_1_0; }
	}
	public class ModelPathSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ModelPathSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocationURLTerminalRuleCall_1_0 = (RuleCall)cLocationAssignment_1.eContents().get(0);
		
		//ModelPathSpec:
		//	"model" location=URL;
		@Override public ParserRule getRule() { return rule; }
		
		//"model" location=URL
		public Group getGroup() { return cGroup; }
		
		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//location=URL
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }
		
		//URL
		public RuleCall getLocationURLTerminalRuleCall_1_0() { return cLocationURLTerminalRuleCall_1_0; }
	}
	public class ObjectiveInterpreterSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ObjectiveInterpreterSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjectiveNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectiveNameValidIDParserRuleCall_1_0 = (RuleCall)cObjectiveNameAssignment_1.eContents().get(0);
		private final Assignment cObjectiveTendencyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectiveTendencyOBJECTIVE_TENDENCYTerminalRuleCall_2_0 = (RuleCall)cObjectiveTendencyAssignment_2.eContents().get(0);
		private final Assignment cObjectiveTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectiveTypeENTITY_TYPETerminalRuleCall_3_0 = (RuleCall)cObjectiveTypeAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cObjectiveSpecAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cObjectiveSpecSTRINGTerminalRuleCall_5_0 = (RuleCall)cObjectiveSpecAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ObjectiveInterpreterSpec:
		//	"objective" objectiveName=ValidID objectiveTendency=OBJECTIVE_TENDENCY objectiveType=ENTITY_TYPE "{"
		//	objectiveSpec=STRING "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"objective" objectiveName=ValidID objectiveTendency=OBJECTIVE_TENDENCY objectiveType=ENTITY_TYPE "{"
		//objectiveSpec=STRING "}"
		public Group getGroup() { return cGroup; }
		
		//"objective"
		public Keyword getObjectiveKeyword_0() { return cObjectiveKeyword_0; }
		
		//objectiveName=ValidID
		public Assignment getObjectiveNameAssignment_1() { return cObjectiveNameAssignment_1; }
		
		//ValidID
		public RuleCall getObjectiveNameValidIDParserRuleCall_1_0() { return cObjectiveNameValidIDParserRuleCall_1_0; }
		
		//objectiveTendency=OBJECTIVE_TENDENCY
		public Assignment getObjectiveTendencyAssignment_2() { return cObjectiveTendencyAssignment_2; }
		
		//OBJECTIVE_TENDENCY
		public RuleCall getObjectiveTendencyOBJECTIVE_TENDENCYTerminalRuleCall_2_0() { return cObjectiveTendencyOBJECTIVE_TENDENCYTerminalRuleCall_2_0; }
		
		//objectiveType=ENTITY_TYPE
		public Assignment getObjectiveTypeAssignment_3() { return cObjectiveTypeAssignment_3; }
		
		//ENTITY_TYPE
		public RuleCall getObjectiveTypeENTITY_TYPETerminalRuleCall_3_0() { return cObjectiveTypeENTITY_TYPETerminalRuleCall_3_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//objectiveSpec=STRING
		public Assignment getObjectiveSpecAssignment_5() { return cObjectiveSpecAssignment_5; }
		
		//STRING
		public RuleCall getObjectiveSpecSTRINGTerminalRuleCall_5_0() { return cObjectiveSpecSTRINGTerminalRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ConstraintInterpreterSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ConstraintInterpreterSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintNameValidIDParserRuleCall_1_0 = (RuleCall)cConstraintNameAssignment_1.eContents().get(0);
		private final Assignment cConstraintTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintTypeENTITY_TYPETerminalRuleCall_2_0 = (RuleCall)cConstraintTypeAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConstraintSpecAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstraintSpecSTRINGTerminalRuleCall_4_0 = (RuleCall)cConstraintSpecAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstraintInterpreterSpec:
		//	"constraint" constraintName=ValidID constraintType=ENTITY_TYPE "{" constraintSpec=STRING "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"constraint" constraintName=ValidID constraintType=ENTITY_TYPE "{" constraintSpec=STRING "}"
		public Group getGroup() { return cGroup; }
		
		//"constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//constraintName=ValidID
		public Assignment getConstraintNameAssignment_1() { return cConstraintNameAssignment_1; }
		
		//ValidID
		public RuleCall getConstraintNameValidIDParserRuleCall_1_0() { return cConstraintNameValidIDParserRuleCall_1_0; }
		
		//constraintType=ENTITY_TYPE
		public Assignment getConstraintTypeAssignment_2() { return cConstraintTypeAssignment_2; }
		
		//ENTITY_TYPE
		public RuleCall getConstraintTypeENTITY_TYPETerminalRuleCall_2_0() { return cConstraintTypeENTITY_TYPETerminalRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//constraintSpec=STRING
		public Assignment getConstraintSpecAssignment_4() { return cConstraintSpecAssignment_4; }
		
		//STRING
		public RuleCall getConstraintSpecSTRINGTerminalRuleCall_4_0() { return cConstraintSpecSTRINGTerminalRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ModelInitialiserSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ModelInitialiserSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModelsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cUsingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialiserAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialiserURLTerminalRuleCall_3_0 = (RuleCall)cInitialiserAssignment_3.eContents().get(0);
		
		//ModelInitialiserSpec:
		//	"initialise" "models" "using" initialiser=URL;
		@Override public ParserRule getRule() { return rule; }
		
		//"initialise" "models" "using" initialiser=URL
		public Group getGroup() { return cGroup; }
		
		//"initialise"
		public Keyword getInitialiseKeyword_0() { return cInitialiseKeyword_0; }
		
		//"models"
		public Keyword getModelsKeyword_1() { return cModelsKeyword_1; }
		
		//"using"
		public Keyword getUsingKeyword_2() { return cUsingKeyword_2; }
		
		//initialiser=URL
		public Assignment getInitialiserAssignment_3() { return cInitialiserAssignment_3; }
		
		//URL
		public RuleCall getInitialiserURLTerminalRuleCall_3_0() { return cInitialiserURLTerminalRuleCall_3_0; }
	}
	public class RulegenSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.RulegenSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMutateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNodeSpecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNodeSpecRulegenNodeParserRuleCall_2_0_0 = (RuleCall)cNodeSpecAssignment_2_0.eContents().get(0);
		private final Assignment cEdgeSpecAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cEdgeSpecRulegenEdgeParserRuleCall_2_1_0 = (RuleCall)cEdgeSpecAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RulegenSpec:
		//	"mutate" "{" (nodeSpec=RulegenNode | edgeSpec=RulegenEdge) "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"mutate" "{" (nodeSpec=RulegenNode | edgeSpec=RulegenEdge) "}"
		public Group getGroup() { return cGroup; }
		
		//"mutate"
		public Keyword getMutateKeyword_0() { return cMutateKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//nodeSpec=RulegenNode | edgeSpec=RulegenEdge
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//nodeSpec=RulegenNode
		public Assignment getNodeSpecAssignment_2_0() { return cNodeSpecAssignment_2_0; }
		
		//RulegenNode
		public RuleCall getNodeSpecRulegenNodeParserRuleCall_2_0_0() { return cNodeSpecRulegenNodeParserRuleCall_2_0_0; }
		
		//edgeSpec=RulegenEdge
		public Assignment getEdgeSpecAssignment_2_1() { return cEdgeSpecAssignment_2_1; }
		
		//RulegenEdge
		public RuleCall getEdgeSpecRulegenEdgeParserRuleCall_2_1_0() { return cEdgeSpecRulegenEdgeParserRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RulegenNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.RulegenNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeSTRINGTerminalRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGenerationRestrictionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cGenerationRestrictionAlternatives_1_1_0 = (Alternatives)cGenerationRestrictionAssignment_1_1.eContents().get(0);
		private final RuleCall cGenerationRestrictionCREATE_NODETerminalRuleCall_1_1_0_0 = (RuleCall)cGenerationRestrictionAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cGenerationRestrictionDELETE_NODETerminalRuleCall_1_1_0_1 = (RuleCall)cGenerationRestrictionAlternatives_1_1_0.eContents().get(1);
		
		//RulegenNode:
		//	node=STRING ("," generationRestriction=(CREATE_NODE | DELETE_NODE))?;
		@Override public ParserRule getRule() { return rule; }
		
		//node=STRING ("," generationRestriction=(CREATE_NODE | DELETE_NODE))?
		public Group getGroup() { return cGroup; }
		
		//node=STRING
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }
		
		//STRING
		public RuleCall getNodeSTRINGTerminalRuleCall_0_0() { return cNodeSTRINGTerminalRuleCall_0_0; }
		
		//("," generationRestriction=(CREATE_NODE | DELETE_NODE))?
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//generationRestriction=(CREATE_NODE | DELETE_NODE)
		public Assignment getGenerationRestrictionAssignment_1_1() { return cGenerationRestrictionAssignment_1_1; }
		
		//(CREATE_NODE | DELETE_NODE)
		public Alternatives getGenerationRestrictionAlternatives_1_1_0() { return cGenerationRestrictionAlternatives_1_1_0; }
		
		//CREATE_NODE
		public RuleCall getGenerationRestrictionCREATE_NODETerminalRuleCall_1_1_0_0() { return cGenerationRestrictionCREATE_NODETerminalRuleCall_1_1_0_0; }
		
		//DELETE_NODE
		public RuleCall getGenerationRestrictionDELETE_NODETerminalRuleCall_1_1_0_1() { return cGenerationRestrictionDELETE_NODETerminalRuleCall_1_1_0_1; }
	}
	public class RulegenEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.RulegenEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeSTRINGTerminalRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEdgeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEdgeSTRINGTerminalRuleCall_2_0 = (RuleCall)cEdgeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGenerationRestrictionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cGenerationRestrictionAlternatives_3_1_0 = (Alternatives)cGenerationRestrictionAssignment_3_1.eContents().get(0);
		private final RuleCall cGenerationRestrictionADD_EDGETerminalRuleCall_3_1_0_0 = (RuleCall)cGenerationRestrictionAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cGenerationRestrictionREMOVE_EDGETerminalRuleCall_3_1_0_1 = (RuleCall)cGenerationRestrictionAlternatives_3_1_0.eContents().get(1);
		
		//RulegenEdge:
		//	node=STRING "," edge=STRING ("," generationRestriction=(ADD_EDGE | REMOVE_EDGE))?;
		@Override public ParserRule getRule() { return rule; }
		
		//node=STRING "," edge=STRING ("," generationRestriction=(ADD_EDGE | REMOVE_EDGE))?
		public Group getGroup() { return cGroup; }
		
		//node=STRING
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }
		
		//STRING
		public RuleCall getNodeSTRINGTerminalRuleCall_0_0() { return cNodeSTRINGTerminalRuleCall_0_0; }
		
		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//edge=STRING
		public Assignment getEdgeAssignment_2() { return cEdgeAssignment_2; }
		
		//STRING
		public RuleCall getEdgeSTRINGTerminalRuleCall_2_0() { return cEdgeSTRINGTerminalRuleCall_2_0; }
		
		//("," generationRestriction=(ADD_EDGE | REMOVE_EDGE))?
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//generationRestriction=(ADD_EDGE | REMOVE_EDGE)
		public Assignment getGenerationRestrictionAssignment_3_1() { return cGenerationRestrictionAssignment_3_1; }
		
		//(ADD_EDGE | REMOVE_EDGE)
		public Alternatives getGenerationRestrictionAlternatives_3_1_0() { return cGenerationRestrictionAlternatives_3_1_0; }
		
		//ADD_EDGE
		public RuleCall getGenerationRestrictionADD_EDGETerminalRuleCall_3_1_0_0() { return cGenerationRestrictionADD_EDGETerminalRuleCall_3_1_0_0; }
		
		//REMOVE_EDGE
		public RuleCall getGenerationRestrictionREMOVE_EDGETerminalRuleCall_3_1_0_1() { return cGenerationRestrictionREMOVE_EDGETerminalRuleCall_3_1_0_1; }
	}
	public class ReportInterpreterSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ReportInterpreterSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReportNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReportNameValidIDParserRuleCall_1_0 = (RuleCall)cReportNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReportSpecAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReportSpecSTRINGTerminalRuleCall_3_0 = (RuleCall)cReportSpecAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReportInterpreterSpec:
		//	"report" reportName=ValidID "{" reportSpec=STRING "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"report" reportName=ValidID "{" reportSpec=STRING "}"
		public Group getGroup() { return cGroup; }
		
		//"report"
		public Keyword getReportKeyword_0() { return cReportKeyword_0; }
		
		//reportName=ValidID
		public Assignment getReportNameAssignment_1() { return cReportNameAssignment_1; }
		
		//ValidID
		public RuleCall getReportNameValidIDParserRuleCall_1_0() { return cReportNameValidIDParserRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//reportSpec=STRING
		public Assignment getReportSpecAssignment_3() { return cReportSpecAssignment_3; }
		
		//STRING
		public RuleCall getReportSpecSTRINGTerminalRuleCall_3_0() { return cReportSpecSTRINGTerminalRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EvolverSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.EvolverSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEvolverTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEvolverTypeEvolverTypeEnumRuleCall_0_0 = (RuleCall)cEvolverTypeAssignment_0.eContents().get(0);
		private final Keyword cUsingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRule_locationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRule_locationURLTerminalRuleCall_2_0 = (RuleCall)cRule_locationAssignment_2.eContents().get(0);
		private final Keyword cUnitKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitSTRINGTerminalRuleCall_4_0 = (RuleCall)cUnitAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cParametersKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cParametersAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cParametersEvolverParameterParserRuleCall_5_2_0 = (RuleCall)cParametersAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cParametersAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cParametersEvolverParameterParserRuleCall_5_3_1_0 = (RuleCall)cParametersAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//EvolverSpec:
		//	evolverType=EvolverType "using" rule_location=URL
		//	"unit" unit=STRING ("parameters" '{'
		//	parameters+=EvolverParameter (',' parameters+=EvolverParameter)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//evolverType=EvolverType "using" rule_location=URL "unit" unit=STRING ("parameters" '{' parameters+=EvolverParameter (','
		//parameters+=EvolverParameter)* '}')?
		public Group getGroup() { return cGroup; }
		
		//evolverType=EvolverType
		public Assignment getEvolverTypeAssignment_0() { return cEvolverTypeAssignment_0; }
		
		//EvolverType
		public RuleCall getEvolverTypeEvolverTypeEnumRuleCall_0_0() { return cEvolverTypeEvolverTypeEnumRuleCall_0_0; }
		
		//"using"
		public Keyword getUsingKeyword_1() { return cUsingKeyword_1; }
		
		//rule_location=URL
		public Assignment getRule_locationAssignment_2() { return cRule_locationAssignment_2; }
		
		//URL
		public RuleCall getRule_locationURLTerminalRuleCall_2_0() { return cRule_locationURLTerminalRuleCall_2_0; }
		
		//"unit"
		public Keyword getUnitKeyword_3() { return cUnitKeyword_3; }
		
		//unit=STRING
		public Assignment getUnitAssignment_4() { return cUnitAssignment_4; }
		
		//STRING
		public RuleCall getUnitSTRINGTerminalRuleCall_4_0() { return cUnitSTRINGTerminalRuleCall_4_0; }
		
		//("parameters" '{' parameters+=EvolverParameter (',' parameters+=EvolverParameter)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//"parameters"
		public Keyword getParametersKeyword_5_0() { return cParametersKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//parameters+=EvolverParameter
		public Assignment getParametersAssignment_5_2() { return cParametersAssignment_5_2; }
		
		//EvolverParameter
		public RuleCall getParametersEvolverParameterParserRuleCall_5_2_0() { return cParametersEvolverParameterParserRuleCall_5_2_0; }
		
		//(',' parameters+=EvolverParameter)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//parameters+=EvolverParameter
		public Assignment getParametersAssignment_5_3_1() { return cParametersAssignment_5_3_1; }
		
		//EvolverParameter
		public RuleCall getParametersEvolverParameterParserRuleCall_5_3_1_0() { return cParametersEvolverParameterParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
	}
	public class MultiplicityRefinementSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.MultiplicityRefinementSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMetamodelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNodeSTRINGTerminalRuleCall_3_0 = (RuleCall)cNodeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEdgeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEdgeSTRINGTerminalRuleCall_5_0 = (RuleCall)cEdgeAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLowerBoundAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLowerBoundINTTerminalRuleCall_7_0 = (RuleCall)cLowerBoundAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cUpperBoundAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cUpperBoundSignedIntegerParserRuleCall_9_0 = (RuleCall)cUpperBoundAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//MultiplicityRefinementSpec:
		//	"refine" "metamodel" "{" node=STRING "," edge=STRING "," lowerBound=INT "," upperBound=SignedInteger "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"refine" "metamodel" "{" node=STRING "," edge=STRING "," lowerBound=INT "," upperBound=SignedInteger "}"
		public Group getGroup() { return cGroup; }
		
		//"refine"
		public Keyword getRefineKeyword_0() { return cRefineKeyword_0; }
		
		//"metamodel"
		public Keyword getMetamodelKeyword_1() { return cMetamodelKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//node=STRING
		public Assignment getNodeAssignment_3() { return cNodeAssignment_3; }
		
		//STRING
		public RuleCall getNodeSTRINGTerminalRuleCall_3_0() { return cNodeSTRINGTerminalRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//edge=STRING
		public Assignment getEdgeAssignment_5() { return cEdgeAssignment_5; }
		
		//STRING
		public RuleCall getEdgeSTRINGTerminalRuleCall_5_0() { return cEdgeSTRINGTerminalRuleCall_5_0; }
		
		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_7() { return cLowerBoundAssignment_7; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_7_0() { return cLowerBoundINTTerminalRuleCall_7_0; }
		
		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//upperBound=SignedInteger
		public Assignment getUpperBoundAssignment_9() { return cUpperBoundAssignment_9; }
		
		//SignedInteger
		public RuleCall getUpperBoundSignedIntegerParserRuleCall_9_0() { return cUpperBoundSignedIntegerParserRuleCall_9_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class EvolverParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.EvolverParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cFunctionAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cFunctionParameterFunctionParserRuleCall_1_1_0_0 = (RuleCall)cFunctionAssignment_1_1_0.eContents().get(0);
		private final Assignment cCustomFunctionAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cCustomFunctionSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cCustomFunctionAssignment_1_1_1.eContents().get(0);
		
		///**
		// * TODO The custom function should ideally use a Jvm class parser, but it doesn't seem
		// * to work with QualifiedName
		// */ EvolverParameter:
		//	name=ValidID ('=>' (function=ParameterFunction | customFunction=STRING));
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ('=>' (function=ParameterFunction | customFunction=STRING))
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//'=>' (function=ParameterFunction | customFunction=STRING)
		public Group getGroup_1() { return cGroup_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0() { return cEqualsSignGreaterThanSignKeyword_1_0; }
		
		//function=ParameterFunction | customFunction=STRING
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//function=ParameterFunction
		public Assignment getFunctionAssignment_1_1_0() { return cFunctionAssignment_1_1_0; }
		
		//ParameterFunction
		public RuleCall getFunctionParameterFunctionParserRuleCall_1_1_0_0() { return cFunctionParameterFunctionParserRuleCall_1_1_0_0; }
		
		//customFunction=STRING
		public Assignment getCustomFunctionAssignment_1_1_1() { return cCustomFunctionAssignment_1_1_1; }
		
		//STRING
		public RuleCall getCustomFunctionSTRINGTerminalRuleCall_1_1_1_0() { return cCustomFunctionSTRINGTerminalRuleCall_1_1_1_0; }
	}
	public class ParameterFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ParameterFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cParameterAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ParameterFunction:
		//	name=ValidID ('('
		//	parameter=STRING ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ('(' parameter=STRING ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//('(' parameter=STRING ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameter=STRING
		public Assignment getParameterAssignment_1_1() { return cParameterAssignment_1_1; }
		
		//STRING
		public RuleCall getParameterSTRINGTerminalRuleCall_1_1_0() { return cParameterSTRINGTerminalRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class SignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.SignedInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedInteger ecore::EIntegerObject:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class AlgorithmSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.AlgorithmSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameALGORITHM_NAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AlgorithmSpec:
		//	name=ALGORITHM_NAME "{"
		//	parameters+=Parameter+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//name=ALGORITHM_NAME "{" parameters+=Parameter+ "}"
		public Group getGroup() { return cGroup; }
		
		//name=ALGORITHM_NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ALGORITHM_NAME
		public RuleCall getNameALGORITHM_NAMETerminalRuleCall_0_0() { return cNameALGORITHM_NAMETerminalRuleCall_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//parameters+=Parameter+
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0() { return cParametersParameterParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TerminationConditionSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.TerminationConditionSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTerminationConditionSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TerminationConditionSpec:
		//	{TerminationConditionSpec}
		//	"{"
		//	parameters+=Parameter+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//{TerminationConditionSpec} "{" parameters+=Parameter+ "}"
		public Group getGroup() { return cGroup; }
		
		//{TerminationConditionSpec}
		public Action getTerminationConditionSpecAction_0() { return cTerminationConditionSpecAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//parameters+=Parameter+
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0() { return cParametersParameterParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ParameterSearchSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ParameterSearchSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterSearchSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///**
		// * Hyperparameter search spec configuration
		// */ ParameterSearchSpec:
		//	{ParameterSearchSpec}
		//	"{"
		//	parameters+=Parameter+
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterSearchSpec} "{" parameters+=Parameter+ "}"
		public Group getGroup() { return cGroup; }
		
		//{ParameterSearchSpec}
		public Action getParameterSearchSpecAction_0() { return cParameterSearchSpecAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//parameters+=Parameter+
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0() { return cParametersParameterParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueParameterValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Parameter:
		//	name=QualifiedName ":" value=ParameterValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName ":" value=ParameterValue
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ParameterValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_2_0() { return cValueParameterValueParserRuleCall_2_0; }
	}
	public class ParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumericAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumericNumberParserRuleCall_0_0 = (RuleCall)cNumericAssignment_0.eContents().get(0);
		private final Assignment cFunctionalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionalIDTerminalRuleCall_1_0 = (RuleCall)cFunctionalAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cParametricAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametricIDTerminalRuleCall_2_0_0 = (RuleCall)cParametricAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cParamsAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final Alternatives cParamsAlternatives_2_2_0_0 = (Alternatives)cParamsAssignment_2_2_0.eContents().get(0);
		private final RuleCall cParamsXNumberLiteralParserRuleCall_2_2_0_0_0 = (RuleCall)cParamsAlternatives_2_2_0_0.eContents().get(0);
		private final RuleCall cParamsXStringLiteralParserRuleCall_2_2_0_0_1 = (RuleCall)cParamsAlternatives_2_2_0_0.eContents().get(1);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final Alternatives cParamsAlternatives_2_2_1_1_0 = (Alternatives)cParamsAssignment_2_2_1_1.eContents().get(0);
		private final RuleCall cParamsXNumberLiteralParserRuleCall_2_2_1_1_0_0 = (RuleCall)cParamsAlternatives_2_2_1_1_0.eContents().get(0);
		private final RuleCall cParamsXStringLiteralParserRuleCall_2_2_1_1_0_1 = (RuleCall)cParamsAlternatives_2_2_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ParameterValue:
		//	numeric=Number | functional=ID | parametric=ID '(' (params+=(XNumberLiteral | XStringLiteral) (','
		//	params+=(XNumberLiteral | XStringLiteral))*)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//numeric=Number | functional=ID | parametric=ID '(' (params+=(XNumberLiteral | XStringLiteral) (','
		//params+=(XNumberLiteral | XStringLiteral))*)+ ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//numeric=Number
		public Assignment getNumericAssignment_0() { return cNumericAssignment_0; }
		
		//Number
		public RuleCall getNumericNumberParserRuleCall_0_0() { return cNumericNumberParserRuleCall_0_0; }
		
		//functional=ID
		public Assignment getFunctionalAssignment_1() { return cFunctionalAssignment_1; }
		
		//ID
		public RuleCall getFunctionalIDTerminalRuleCall_1_0() { return cFunctionalIDTerminalRuleCall_1_0; }
		
		//parametric=ID '(' (params+=(XNumberLiteral | XStringLiteral) (',' params+=(XNumberLiteral | XStringLiteral))*)+ ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//parametric=ID
		public Assignment getParametricAssignment_2_0() { return cParametricAssignment_2_0; }
		
		//ID
		public RuleCall getParametricIDTerminalRuleCall_2_0_0() { return cParametricIDTerminalRuleCall_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//(params+=(XNumberLiteral | XStringLiteral) (',' params+=(XNumberLiteral | XStringLiteral))*)+
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//params+=(XNumberLiteral | XStringLiteral)
		public Assignment getParamsAssignment_2_2_0() { return cParamsAssignment_2_2_0; }
		
		//(XNumberLiteral | XStringLiteral)
		public Alternatives getParamsAlternatives_2_2_0_0() { return cParamsAlternatives_2_2_0_0; }
		
		//XNumberLiteral
		public RuleCall getParamsXNumberLiteralParserRuleCall_2_2_0_0_0() { return cParamsXNumberLiteralParserRuleCall_2_2_0_0_0; }
		
		//XStringLiteral
		public RuleCall getParamsXStringLiteralParserRuleCall_2_2_0_0_1() { return cParamsXStringLiteralParserRuleCall_2_2_0_0_1; }
		
		//(',' params+=(XNumberLiteral | XStringLiteral))*
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }
		
		//params+=(XNumberLiteral | XStringLiteral)
		public Assignment getParamsAssignment_2_2_1_1() { return cParamsAssignment_2_2_1_1; }
		
		//(XNumberLiteral | XStringLiteral)
		public Alternatives getParamsAlternatives_2_2_1_1_0() { return cParamsAlternatives_2_2_1_1_0; }
		
		//XNumberLiteral
		public RuleCall getParamsXNumberLiteralParserRuleCall_2_2_1_1_0_0() { return cParamsXNumberLiteralParserRuleCall_2_2_1_1_0_0; }
		
		//XStringLiteral
		public RuleCall getParamsXStringLiteralParserRuleCall_2_2_1_1_0_1() { return cParamsXStringLiteralParserRuleCall_2_2_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	
	public class EvolverTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.EvolverType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMUTATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMUTATEMutateKeyword_0_0 = (Keyword)cMUTATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBREEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBREEDBreedKeyword_1_0 = (Keyword)cBREEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EvolverType:
		//	MUTATE='mutate' | BREED='breed';
		public EnumRule getRule() { return rule; }
		
		//MUTATE='mutate' | BREED='breed'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MUTATE='mutate'
		public EnumLiteralDeclaration getMUTATEEnumLiteralDeclaration_0() { return cMUTATEEnumLiteralDeclaration_0; }
		
		//'mutate'
		public Keyword getMUTATEMutateKeyword_0_0() { return cMUTATEMutateKeyword_0_0; }
		
		//BREED='breed'
		public EnumLiteralDeclaration getBREEDEnumLiteralDeclaration_1() { return cBREEDEnumLiteralDeclaration_1; }
		
		//'breed'
		public Keyword getBREEDBreedKeyword_1_0() { return cBREEDBreedKeyword_1_0; }
	}
	
	private final OptimisationElements pOptimisation;
	private final ProblemSpecElements pProblemSpec;
	private final GoalSpecElements pGoalSpec;
	private final SearchSpecElements pSearchSpec;
	private final SolverSpecElements pSolverSpec;
	private final BasePathSpecElements pBasePathSpec;
	private final MetaModelSpecElements pMetaModelSpec;
	private final ModelPathSpecElements pModelPathSpec;
	private final ObjectiveInterpreterSpecElements pObjectiveInterpreterSpec;
	private final ConstraintInterpreterSpecElements pConstraintInterpreterSpec;
	private final ModelInitialiserSpecElements pModelInitialiserSpec;
	private final RulegenSpecElements pRulegenSpec;
	private final RulegenNodeElements pRulegenNode;
	private final RulegenEdgeElements pRulegenEdge;
	private final ReportInterpreterSpecElements pReportInterpreterSpec;
	private final EvolverSpecElements pEvolverSpec;
	private final MultiplicityRefinementSpecElements pMultiplicityRefinementSpec;
	private final EvolverParameterElements pEvolverParameter;
	private final ParameterFunctionElements pParameterFunction;
	private final EvolverTypeElements eEvolverType;
	private final SignedIntegerElements pSignedInteger;
	private final AlgorithmSpecElements pAlgorithmSpec;
	private final TerminationConditionSpecElements pTerminationConditionSpec;
	private final ParameterSearchSpecElements pParameterSearchSpec;
	private final ParameterElements pParameter;
	private final ParameterValueElements pParameterValue;
	private final TerminalRule tCREATE_NODE;
	private final TerminalRule tDELETE_NODE;
	private final TerminalRule tADD_EDGE;
	private final TerminalRule tREMOVE_EDGE;
	private final TerminalRule tSOLVER_ENGINE;
	private final TerminalRule tALGORITHM_FACTORY;
	private final TerminalRule tALGORITHM_NAME;
	private final TerminalRule tURL;
	private final TerminalRule tOBJECTIVE_TENDENCY;
	private final TerminalRule tENTITY_TYPE;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public MoptGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pOptimisation = new OptimisationElements();
		this.pProblemSpec = new ProblemSpecElements();
		this.pGoalSpec = new GoalSpecElements();
		this.pSearchSpec = new SearchSpecElements();
		this.pSolverSpec = new SolverSpecElements();
		this.pBasePathSpec = new BasePathSpecElements();
		this.pMetaModelSpec = new MetaModelSpecElements();
		this.pModelPathSpec = new ModelPathSpecElements();
		this.pObjectiveInterpreterSpec = new ObjectiveInterpreterSpecElements();
		this.pConstraintInterpreterSpec = new ConstraintInterpreterSpecElements();
		this.pModelInitialiserSpec = new ModelInitialiserSpecElements();
		this.pRulegenSpec = new RulegenSpecElements();
		this.pRulegenNode = new RulegenNodeElements();
		this.pRulegenEdge = new RulegenEdgeElements();
		this.pReportInterpreterSpec = new ReportInterpreterSpecElements();
		this.pEvolverSpec = new EvolverSpecElements();
		this.pMultiplicityRefinementSpec = new MultiplicityRefinementSpecElements();
		this.pEvolverParameter = new EvolverParameterElements();
		this.pParameterFunction = new ParameterFunctionElements();
		this.eEvolverType = new EvolverTypeElements();
		this.pSignedInteger = new SignedIntegerElements();
		this.pAlgorithmSpec = new AlgorithmSpecElements();
		this.pTerminationConditionSpec = new TerminationConditionSpecElements();
		this.pParameterSearchSpec = new ParameterSearchSpecElements();
		this.pParameter = new ParameterElements();
		this.pParameterValue = new ParameterValueElements();
		this.tCREATE_NODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.CREATE_NODE");
		this.tDELETE_NODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.DELETE_NODE");
		this.tADD_EDGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ADD_EDGE");
		this.tREMOVE_EDGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.REMOVE_EDGE");
		this.tSOLVER_ENGINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.SOLVER_ENGINE");
		this.tALGORITHM_FACTORY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ALGORITHM_FACTORY");
		this.tALGORITHM_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ALGORITHM_NAME");
		this.tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.URL");
		this.tOBJECTIVE_TENDENCY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.OBJECTIVE_TENDENCY");
		this.tENTITY_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdeoptimiser.languages.Mopt.ENTITY_TYPE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.mdeoptimiser.languages.Mopt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Optimisation:
	//	problem=ProblemSpec
	//	goal=GoalSpec
	//	search=SearchSpec
	//	solver=SolverSpec;
	public OptimisationElements getOptimisationAccess() {
		return pOptimisation;
	}
	
	public ParserRule getOptimisationRule() {
		return getOptimisationAccess().getRule();
	}
	
	//ProblemSpec:
	//	"problem" "{"
	//	basepath=BasePathSpec
	//	metamodel=MetaModelSpec
	//	model=ModelPathSpec
	//	modelInitialiser=ModelInitialiserSpec?
	//	"}";
	public ProblemSpecElements getProblemSpecAccess() {
		return pProblemSpec;
	}
	
	public ParserRule getProblemSpecRule() {
		return getProblemSpecAccess().getRule();
	}
	
	//GoalSpec:
	//	"goal" "{"
	//	refinements+=MultiplicityRefinementSpec*
	//	objectives+=ObjectiveInterpreterSpec+
	//	constraints+=ConstraintInterpreterSpec*
	//	"}";
	public GoalSpecElements getGoalSpecAccess() {
		return pGoalSpec;
	}
	
	public ParserRule getGoalSpecRule() {
		return getGoalSpecAccess().getRule();
	}
	
	//SearchSpec:
	//	"search" "{"
	//	reports+=ReportInterpreterSpec*
	//	evolvers+=EvolverSpec*
	//	rulegen+=RulegenSpec*
	//	"}";
	public SearchSpecElements getSearchSpecAccess() {
		return pSearchSpec;
	}
	
	public ParserRule getSearchSpecRule() {
		return getSearchSpecAccess().getRule();
	}
	
	//SolverSpec:
	//	"solver" "{" ("engine" solverEngine=SOLVER_ENGINE)?
	//	"optimisation" "provider" algorithmFactory=ALGORITHM_FACTORY
	//	"algorithm" algorithm=AlgorithmSpec
	//	"termination" terminationCondition=TerminationConditionSpec ("parameter" "search"
	//	parameterSearch=ParameterSearchSpec)? ("batches" algorithmBatches=INT)?
	//	"}";
	public SolverSpecElements getSolverSpecAccess() {
		return pSolverSpec;
	}
	
	public ParserRule getSolverSpecRule() {
		return getSolverSpecAccess().getRule();
	}
	
	///**
	// * Use this to identify a basepath to be set in the HenshinResourceSet so that Henshin
	// * transformations referencing file-based meta-models through relative paths will work
	// * correctly. This will happen mainly when working with dynamic instances rather than
	// * fully generated and registered metamodels. All further URLs should be either absolute
	// * or relative to this basepath.
	// */ BasePathSpec:
	//	"basepath" location=URL;
	public BasePathSpecElements getBasePathSpecAccess() {
		return pBasePathSpec;
	}
	
	public ParserRule getBasePathSpecRule() {
		return getBasePathSpecAccess().getRule();
	}
	
	///**
	// * URL might be a file location, relative to basepath, in which case we load the metamodel dynamically.
	// * It may also be a dot-separated fully-qualified class name for a meta-model package, in which case we
	// * register that globally.
	// */ MetaModelSpec:
	//	"metamodel" location=URL;
	public MetaModelSpecElements getMetaModelSpecAccess() {
		return pMetaModelSpec;
	}
	
	public ParserRule getMetaModelSpecRule() {
		return getMetaModelSpecAccess().getRule();
	}
	
	//ModelPathSpec:
	//	"model" location=URL;
	public ModelPathSpecElements getModelPathSpecAccess() {
		return pModelPathSpec;
	}
	
	public ParserRule getModelPathSpecRule() {
		return getModelPathSpecAccess().getRule();
	}
	
	//ObjectiveInterpreterSpec:
	//	"objective" objectiveName=ValidID objectiveTendency=OBJECTIVE_TENDENCY objectiveType=ENTITY_TYPE "{"
	//	objectiveSpec=STRING "}";
	public ObjectiveInterpreterSpecElements getObjectiveInterpreterSpecAccess() {
		return pObjectiveInterpreterSpec;
	}
	
	public ParserRule getObjectiveInterpreterSpecRule() {
		return getObjectiveInterpreterSpecAccess().getRule();
	}
	
	//ConstraintInterpreterSpec:
	//	"constraint" constraintName=ValidID constraintType=ENTITY_TYPE "{" constraintSpec=STRING "}";
	public ConstraintInterpreterSpecElements getConstraintInterpreterSpecAccess() {
		return pConstraintInterpreterSpec;
	}
	
	public ParserRule getConstraintInterpreterSpecRule() {
		return getConstraintInterpreterSpecAccess().getRule();
	}
	
	//ModelInitialiserSpec:
	//	"initialise" "models" "using" initialiser=URL;
	public ModelInitialiserSpecElements getModelInitialiserSpecAccess() {
		return pModelInitialiserSpec;
	}
	
	public ParserRule getModelInitialiserSpecRule() {
		return getModelInitialiserSpecAccess().getRule();
	}
	
	//RulegenSpec:
	//	"mutate" "{" (nodeSpec=RulegenNode | edgeSpec=RulegenEdge) "}";
	public RulegenSpecElements getRulegenSpecAccess() {
		return pRulegenSpec;
	}
	
	public ParserRule getRulegenSpecRule() {
		return getRulegenSpecAccess().getRule();
	}
	
	//RulegenNode:
	//	node=STRING ("," generationRestriction=(CREATE_NODE | DELETE_NODE))?;
	public RulegenNodeElements getRulegenNodeAccess() {
		return pRulegenNode;
	}
	
	public ParserRule getRulegenNodeRule() {
		return getRulegenNodeAccess().getRule();
	}
	
	//RulegenEdge:
	//	node=STRING "," edge=STRING ("," generationRestriction=(ADD_EDGE | REMOVE_EDGE))?;
	public RulegenEdgeElements getRulegenEdgeAccess() {
		return pRulegenEdge;
	}
	
	public ParserRule getRulegenEdgeRule() {
		return getRulegenEdgeAccess().getRule();
	}
	
	//ReportInterpreterSpec:
	//	"report" reportName=ValidID "{" reportSpec=STRING "}";
	public ReportInterpreterSpecElements getReportInterpreterSpecAccess() {
		return pReportInterpreterSpec;
	}
	
	public ParserRule getReportInterpreterSpecRule() {
		return getReportInterpreterSpecAccess().getRule();
	}
	
	//EvolverSpec:
	//	evolverType=EvolverType "using" rule_location=URL
	//	"unit" unit=STRING ("parameters" '{'
	//	parameters+=EvolverParameter (',' parameters+=EvolverParameter)*
	//	'}')?;
	public EvolverSpecElements getEvolverSpecAccess() {
		return pEvolverSpec;
	}
	
	public ParserRule getEvolverSpecRule() {
		return getEvolverSpecAccess().getRule();
	}
	
	//MultiplicityRefinementSpec:
	//	"refine" "metamodel" "{" node=STRING "," edge=STRING "," lowerBound=INT "," upperBound=SignedInteger "}";
	public MultiplicityRefinementSpecElements getMultiplicityRefinementSpecAccess() {
		return pMultiplicityRefinementSpec;
	}
	
	public ParserRule getMultiplicityRefinementSpecRule() {
		return getMultiplicityRefinementSpecAccess().getRule();
	}
	
	///**
	// * TODO The custom function should ideally use a Jvm class parser, but it doesn't seem
	// * to work with QualifiedName
	// */ EvolverParameter:
	//	name=ValidID ('=>' (function=ParameterFunction | customFunction=STRING));
	public EvolverParameterElements getEvolverParameterAccess() {
		return pEvolverParameter;
	}
	
	public ParserRule getEvolverParameterRule() {
		return getEvolverParameterAccess().getRule();
	}
	
	//ParameterFunction:
	//	name=ValidID ('('
	//	parameter=STRING ')')?;
	public ParameterFunctionElements getParameterFunctionAccess() {
		return pParameterFunction;
	}
	
	public ParserRule getParameterFunctionRule() {
		return getParameterFunctionAccess().getRule();
	}
	
	//enum EvolverType:
	//	MUTATE='mutate' | BREED='breed';
	public EvolverTypeElements getEvolverTypeAccess() {
		return eEvolverType;
	}
	
	public EnumRule getEvolverTypeRule() {
		return getEvolverTypeAccess().getRule();
	}
	
	//SignedInteger ecore::EIntegerObject:
	//	'-'? INT;
	public SignedIntegerElements getSignedIntegerAccess() {
		return pSignedInteger;
	}
	
	public ParserRule getSignedIntegerRule() {
		return getSignedIntegerAccess().getRule();
	}
	
	//AlgorithmSpec:
	//	name=ALGORITHM_NAME "{"
	//	parameters+=Parameter+
	//	"}";
	public AlgorithmSpecElements getAlgorithmSpecAccess() {
		return pAlgorithmSpec;
	}
	
	public ParserRule getAlgorithmSpecRule() {
		return getAlgorithmSpecAccess().getRule();
	}
	
	//TerminationConditionSpec:
	//	{TerminationConditionSpec}
	//	"{"
	//	parameters+=Parameter+
	//	"}";
	public TerminationConditionSpecElements getTerminationConditionSpecAccess() {
		return pTerminationConditionSpec;
	}
	
	public ParserRule getTerminationConditionSpecRule() {
		return getTerminationConditionSpecAccess().getRule();
	}
	
	///**
	// * Hyperparameter search spec configuration
	// */ ParameterSearchSpec:
	//	{ParameterSearchSpec}
	//	"{"
	//	parameters+=Parameter+
	//	"}";
	public ParameterSearchSpecElements getParameterSearchSpecAccess() {
		return pParameterSearchSpec;
	}
	
	public ParserRule getParameterSearchSpecRule() {
		return getParameterSearchSpecAccess().getRule();
	}
	
	//Parameter:
	//	name=QualifiedName ":" value=ParameterValue;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ParameterValue:
	//	numeric=Number | functional=ID | parametric=ID '(' (params+=(XNumberLiteral | XStringLiteral) (','
	//	params+=(XNumberLiteral | XStringLiteral))*)+ ')';
	public ParameterValueElements getParameterValueAccess() {
		return pParameterValue;
	}
	
	public ParserRule getParameterValueRule() {
		return getParameterValueAccess().getRule();
	}
	
	//terminal CREATE_NODE:
	//	'CREATE';
	public TerminalRule getCREATE_NODERule() {
		return tCREATE_NODE;
	}
	
	//terminal DELETE_NODE:
	//	'DELETE';
	public TerminalRule getDELETE_NODERule() {
		return tDELETE_NODE;
	}
	
	//terminal ADD_EDGE:
	//	'ADD';
	public TerminalRule getADD_EDGERule() {
		return tADD_EDGE;
	}
	
	//terminal REMOVE_EDGE:
	//	'REMOVE';
	public TerminalRule getREMOVE_EDGERule() {
		return tREMOVE_EDGE;
	}
	
	//terminal SOLVER_ENGINE:
	//	'henshin' | 'momot' | 'efmconfig';
	public TerminalRule getSOLVER_ENGINERule() {
		return tSOLVER_ENGINE;
	}
	
	//terminal ALGORITHM_FACTORY:
	//	'moea' | 'ecj';
	public TerminalRule getALGORITHM_FACTORYRule() {
		return tALGORITHM_FACTORY;
	}
	
	//terminal ALGORITHM_NAME:
	//	'NSGAII' | 'IBEA' | 'SPEA2' | 'SMSMOEA' | 'VEGA' | 'PESA2' | 'PAES' | 'RANDOM';
	public TerminalRule getALGORITHM_NAMERule() {
		return tALGORITHM_NAME;
	}
	
	//terminal URL:
	//	'<'->'>';
	public TerminalRule getURLRule() {
		return tURL;
	}
	
	//terminal OBJECTIVE_TENDENCY:
	//	'minimise' | 'maximise';
	public TerminalRule getOBJECTIVE_TENDENCYRule() {
		return tOBJECTIVE_TENDENCY;
	}
	
	//terminal ENTITY_TYPE:
	//	'java' | 'ocl';
	public TerminalRule getENTITY_TYPERule() {
		return tENTITY_TYPE;
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */ StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
