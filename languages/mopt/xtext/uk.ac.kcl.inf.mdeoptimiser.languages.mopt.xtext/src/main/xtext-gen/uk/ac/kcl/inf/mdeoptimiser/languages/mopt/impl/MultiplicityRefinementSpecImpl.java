/**
 * generated by Xtext 2.17.0
 */
package uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MoptPackage;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MultiplicityRefinementSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Multiplicity Refinement Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.MultiplicityRefinementSpecImpl#getNode <em>Node</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.MultiplicityRefinementSpecImpl#getEdge <em>Edge</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.MultiplicityRefinementSpecImpl#getLowerBound <em>Lower Bound</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.MultiplicityRefinementSpecImpl#getUpperBound <em>Upper Bound</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MultiplicityRefinementSpecImpl extends MinimalEObjectImpl.Container implements MultiplicityRefinementSpec
{
  /**
   * The default value of the '{@link #getNode() <em>Node</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNode()
   * @generated
   * @ordered
   */
  protected static final String NODE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNode() <em>Node</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNode()
   * @generated
   * @ordered
   */
  protected String node = NODE_EDEFAULT;

  /**
   * The default value of the '{@link #getEdge() <em>Edge</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEdge()
   * @generated
   * @ordered
   */
  protected static final String EDGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEdge() <em>Edge</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEdge()
   * @generated
   * @ordered
   */
  protected String edge = EDGE_EDEFAULT;

  /**
   * The default value of the '{@link #getLowerBound() <em>Lower Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLowerBound()
   * @generated
   * @ordered
   */
  protected static final int LOWER_BOUND_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getLowerBound() <em>Lower Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLowerBound()
   * @generated
   * @ordered
   */
  protected int lowerBound = LOWER_BOUND_EDEFAULT;

  /**
   * The default value of the '{@link #getUpperBound() <em>Upper Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpperBound()
   * @generated
   * @ordered
   */
  protected static final Integer UPPER_BOUND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUpperBound() <em>Upper Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpperBound()
   * @generated
   * @ordered
   */
  protected Integer upperBound = UPPER_BOUND_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MultiplicityRefinementSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoptPackage.Literals.MULTIPLICITY_REFINEMENT_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getNode()
  {
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNode(String newNode)
  {
    String oldNode = node;
    node = newNode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__NODE, oldNode, node));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEdge()
  {
    return edge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEdge(String newEdge)
  {
    String oldEdge = edge;
    edge = newEdge;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__EDGE, oldEdge, edge));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getLowerBound()
  {
    return lowerBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLowerBound(int newLowerBound)
  {
    int oldLowerBound = lowerBound;
    lowerBound = newLowerBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__LOWER_BOUND, oldLowerBound, lowerBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Integer getUpperBound()
  {
    return upperBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUpperBound(Integer newUpperBound)
  {
    Integer oldUpperBound = upperBound;
    upperBound = newUpperBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__UPPER_BOUND, oldUpperBound, upperBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__NODE:
        return getNode();
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__EDGE:
        return getEdge();
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__LOWER_BOUND:
        return getLowerBound();
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__UPPER_BOUND:
        return getUpperBound();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__NODE:
        setNode((String)newValue);
        return;
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__EDGE:
        setEdge((String)newValue);
        return;
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__LOWER_BOUND:
        setLowerBound((Integer)newValue);
        return;
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__UPPER_BOUND:
        setUpperBound((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__NODE:
        setNode(NODE_EDEFAULT);
        return;
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__EDGE:
        setEdge(EDGE_EDEFAULT);
        return;
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__LOWER_BOUND:
        setLowerBound(LOWER_BOUND_EDEFAULT);
        return;
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__UPPER_BOUND:
        setUpperBound(UPPER_BOUND_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__NODE:
        return NODE_EDEFAULT == null ? node != null : !NODE_EDEFAULT.equals(node);
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__EDGE:
        return EDGE_EDEFAULT == null ? edge != null : !EDGE_EDEFAULT.equals(edge);
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__LOWER_BOUND:
        return lowerBound != LOWER_BOUND_EDEFAULT;
      case MoptPackage.MULTIPLICITY_REFINEMENT_SPEC__UPPER_BOUND:
        return UPPER_BOUND_EDEFAULT == null ? upperBound != null : !UPPER_BOUND_EDEFAULT.equals(upperBound);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (node: ");
    result.append(node);
    result.append(", edge: ");
    result.append(edge);
    result.append(", lowerBound: ");
    result.append(lowerBound);
    result.append(", upperBound: ");
    result.append(upperBound);
    result.append(')');
    return result.toString();
  }

} //MultiplicityRefinementSpecImpl
