/**
 * generated by Xtext 2.17.0
 */
package uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ConstraintInterpreterSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.GoalSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MoptPackage;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MultiplicityRefinementSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ObjectiveInterpreterSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Goal Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.GoalSpecImpl#getRefinements <em>Refinements</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.GoalSpecImpl#getObjectives <em>Objectives</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.GoalSpecImpl#getConstraints <em>Constraints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GoalSpecImpl extends MinimalEObjectImpl.Container implements GoalSpec
{
  /**
   * The cached value of the '{@link #getRefinements() <em>Refinements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRefinements()
   * @generated
   * @ordered
   */
  protected EList<MultiplicityRefinementSpec> refinements;

  /**
   * The cached value of the '{@link #getObjectives() <em>Objectives</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectives()
   * @generated
   * @ordered
   */
  protected EList<ObjectiveInterpreterSpec> objectives;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected EList<ConstraintInterpreterSpec> constraints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GoalSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoptPackage.Literals.GOAL_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MultiplicityRefinementSpec> getRefinements()
  {
    if (refinements == null)
    {
      refinements = new EObjectContainmentEList<MultiplicityRefinementSpec>(MultiplicityRefinementSpec.class, this, MoptPackage.GOAL_SPEC__REFINEMENTS);
    }
    return refinements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ObjectiveInterpreterSpec> getObjectives()
  {
    if (objectives == null)
    {
      objectives = new EObjectContainmentEList<ObjectiveInterpreterSpec>(ObjectiveInterpreterSpec.class, this, MoptPackage.GOAL_SPEC__OBJECTIVES);
    }
    return objectives;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ConstraintInterpreterSpec> getConstraints()
  {
    if (constraints == null)
    {
      constraints = new EObjectContainmentEList<ConstraintInterpreterSpec>(ConstraintInterpreterSpec.class, this, MoptPackage.GOAL_SPEC__CONSTRAINTS);
    }
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoptPackage.GOAL_SPEC__REFINEMENTS:
        return ((InternalEList<?>)getRefinements()).basicRemove(otherEnd, msgs);
      case MoptPackage.GOAL_SPEC__OBJECTIVES:
        return ((InternalEList<?>)getObjectives()).basicRemove(otherEnd, msgs);
      case MoptPackage.GOAL_SPEC__CONSTRAINTS:
        return ((InternalEList<?>)getConstraints()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoptPackage.GOAL_SPEC__REFINEMENTS:
        return getRefinements();
      case MoptPackage.GOAL_SPEC__OBJECTIVES:
        return getObjectives();
      case MoptPackage.GOAL_SPEC__CONSTRAINTS:
        return getConstraints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoptPackage.GOAL_SPEC__REFINEMENTS:
        getRefinements().clear();
        getRefinements().addAll((Collection<? extends MultiplicityRefinementSpec>)newValue);
        return;
      case MoptPackage.GOAL_SPEC__OBJECTIVES:
        getObjectives().clear();
        getObjectives().addAll((Collection<? extends ObjectiveInterpreterSpec>)newValue);
        return;
      case MoptPackage.GOAL_SPEC__CONSTRAINTS:
        getConstraints().clear();
        getConstraints().addAll((Collection<? extends ConstraintInterpreterSpec>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoptPackage.GOAL_SPEC__REFINEMENTS:
        getRefinements().clear();
        return;
      case MoptPackage.GOAL_SPEC__OBJECTIVES:
        getObjectives().clear();
        return;
      case MoptPackage.GOAL_SPEC__CONSTRAINTS:
        getConstraints().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoptPackage.GOAL_SPEC__REFINEMENTS:
        return refinements != null && !refinements.isEmpty();
      case MoptPackage.GOAL_SPEC__OBJECTIVES:
        return objectives != null && !objectives.isEmpty();
      case MoptPackage.GOAL_SPEC__CONSTRAINTS:
        return constraints != null && !constraints.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //GoalSpecImpl
