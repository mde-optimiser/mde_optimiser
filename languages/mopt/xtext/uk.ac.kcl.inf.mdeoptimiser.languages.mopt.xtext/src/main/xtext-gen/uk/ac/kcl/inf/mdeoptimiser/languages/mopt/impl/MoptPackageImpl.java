/**
 * generated by Xtext 2.17.0
 */
package uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.eclipse.xtext.xbase.XbasePackage;

import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.AlgorithmSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.BasePathSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ConstraintInterpreterSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.EvolverParameter;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.EvolverSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.EvolverType;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.GoalSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MetaModelSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ModelInitialiserSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ModelPathSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MoptFactory;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MoptPackage;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MultiplicityRefinementSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ObjectiveInterpreterSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.Optimisation;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.Parameter;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ParameterFunction;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ParameterSearchSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ParameterValue;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ProblemSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ReportInterpreterSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.RulegenEdge;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.RulegenNode;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.RulegenSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.SearchSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.SolverSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.TerminationConditionSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MoptPackageImpl extends EPackageImpl implements MoptPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass optimisationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass problemSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass goalSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass searchSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass solverSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basePathSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass metaModelSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelPathSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass objectiveInterpreterSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass constraintInterpreterSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelInitialiserSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rulegenSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rulegenNodeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rulegenEdgeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass reportInterpreterSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass evolverSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multiplicityRefinementSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass evolverParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass algorithmSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass terminationConditionSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterSearchSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum evolverTypeEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MoptPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MoptPackageImpl()
  {
    super(eNS_URI, MoptFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link MoptPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MoptPackage init()
  {
    if (isInited) return (MoptPackage)EPackage.Registry.INSTANCE.getEPackage(MoptPackage.eNS_URI);

    // Obtain or create and register package
    MoptPackageImpl theMoptPackage = (MoptPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof MoptPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new MoptPackageImpl());

    isInited = true;

    // Initialize simple dependencies
    XbasePackage.eINSTANCE.eClass();

    // Create package meta-data objects
    theMoptPackage.createPackageContents();

    // Initialize created meta-data
    theMoptPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMoptPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MoptPackage.eNS_URI, theMoptPackage);
    return theMoptPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOptimisation()
  {
    return optimisationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOptimisation_Problem()
  {
    return (EReference)optimisationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOptimisation_Goal()
  {
    return (EReference)optimisationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOptimisation_Search()
  {
    return (EReference)optimisationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOptimisation_Solver()
  {
    return (EReference)optimisationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getProblemSpec()
  {
    return problemSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProblemSpec_Basepath()
  {
    return (EReference)problemSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProblemSpec_Metamodel()
  {
    return (EReference)problemSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProblemSpec_Model()
  {
    return (EReference)problemSpecEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProblemSpec_ModelInitialiser()
  {
    return (EReference)problemSpecEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getGoalSpec()
  {
    return goalSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getGoalSpec_Refinements()
  {
    return (EReference)goalSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getGoalSpec_Objectives()
  {
    return (EReference)goalSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getGoalSpec_Constraints()
  {
    return (EReference)goalSpecEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSearchSpec()
  {
    return searchSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSearchSpec_Reports()
  {
    return (EReference)searchSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSearchSpec_Evolvers()
  {
    return (EReference)searchSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSearchSpec_Rulegen()
  {
    return (EReference)searchSpecEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSolverSpec()
  {
    return solverSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSolverSpec_SolverEngine()
  {
    return (EAttribute)solverSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSolverSpec_AlgorithmFactory()
  {
    return (EAttribute)solverSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSolverSpec_Algorithm()
  {
    return (EReference)solverSpecEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSolverSpec_TerminationCondition()
  {
    return (EReference)solverSpecEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSolverSpec_ParameterSearch()
  {
    return (EReference)solverSpecEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSolverSpec_AlgorithmBatches()
  {
    return (EAttribute)solverSpecEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBasePathSpec()
  {
    return basePathSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBasePathSpec_Location()
  {
    return (EAttribute)basePathSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMetaModelSpec()
  {
    return metaModelSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMetaModelSpec_Location()
  {
    return (EAttribute)metaModelSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getModelPathSpec()
  {
    return modelPathSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getModelPathSpec_Location()
  {
    return (EAttribute)modelPathSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getObjectiveInterpreterSpec()
  {
    return objectiveInterpreterSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getObjectiveInterpreterSpec_ObjectiveName()
  {
    return (EAttribute)objectiveInterpreterSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getObjectiveInterpreterSpec_ObjectiveTendency()
  {
    return (EAttribute)objectiveInterpreterSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getObjectiveInterpreterSpec_ObjectiveType()
  {
    return (EAttribute)objectiveInterpreterSpecEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getObjectiveInterpreterSpec_ObjectiveSpec()
  {
    return (EAttribute)objectiveInterpreterSpecEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getConstraintInterpreterSpec()
  {
    return constraintInterpreterSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getConstraintInterpreterSpec_ConstraintName()
  {
    return (EAttribute)constraintInterpreterSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getConstraintInterpreterSpec_ConstraintType()
  {
    return (EAttribute)constraintInterpreterSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getConstraintInterpreterSpec_ConstraintSpec()
  {
    return (EAttribute)constraintInterpreterSpecEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getModelInitialiserSpec()
  {
    return modelInitialiserSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getModelInitialiserSpec_Initialiser()
  {
    return (EAttribute)modelInitialiserSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRulegenSpec()
  {
    return rulegenSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRulegenSpec_NodeSpec()
  {
    return (EReference)rulegenSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRulegenSpec_EdgeSpec()
  {
    return (EReference)rulegenSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRulegenNode()
  {
    return rulegenNodeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRulegenNode_Node()
  {
    return (EAttribute)rulegenNodeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRulegenNode_GenerationRestriction()
  {
    return (EAttribute)rulegenNodeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRulegenEdge()
  {
    return rulegenEdgeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRulegenEdge_Node()
  {
    return (EAttribute)rulegenEdgeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRulegenEdge_Edge()
  {
    return (EAttribute)rulegenEdgeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRulegenEdge_GenerationRestriction()
  {
    return (EAttribute)rulegenEdgeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getReportInterpreterSpec()
  {
    return reportInterpreterSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getReportInterpreterSpec_ReportName()
  {
    return (EAttribute)reportInterpreterSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getReportInterpreterSpec_ReportSpec()
  {
    return (EAttribute)reportInterpreterSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getEvolverSpec()
  {
    return evolverSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEvolverSpec_EvolverType()
  {
    return (EAttribute)evolverSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEvolverSpec_Rule_location()
  {
    return (EAttribute)evolverSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEvolverSpec_Unit()
  {
    return (EAttribute)evolverSpecEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getEvolverSpec_Parameters()
  {
    return (EReference)evolverSpecEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMultiplicityRefinementSpec()
  {
    return multiplicityRefinementSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMultiplicityRefinementSpec_Node()
  {
    return (EAttribute)multiplicityRefinementSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMultiplicityRefinementSpec_Edge()
  {
    return (EAttribute)multiplicityRefinementSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMultiplicityRefinementSpec_LowerBound()
  {
    return (EAttribute)multiplicityRefinementSpecEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMultiplicityRefinementSpec_UpperBound()
  {
    return (EAttribute)multiplicityRefinementSpecEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getEvolverParameter()
  {
    return evolverParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEvolverParameter_Name()
  {
    return (EAttribute)evolverParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getEvolverParameter_Function()
  {
    return (EReference)evolverParameterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEvolverParameter_CustomFunction()
  {
    return (EAttribute)evolverParameterEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParameterFunction()
  {
    return parameterFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getParameterFunction_Name()
  {
    return (EAttribute)parameterFunctionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getParameterFunction_Parameter()
  {
    return (EAttribute)parameterFunctionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAlgorithmSpec()
  {
    return algorithmSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAlgorithmSpec_Name()
  {
    return (EAttribute)algorithmSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAlgorithmSpec_Parameters()
  {
    return (EReference)algorithmSpecEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTerminationConditionSpec()
  {
    return terminationConditionSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTerminationConditionSpec_Parameters()
  {
    return (EReference)terminationConditionSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParameterSearchSpec()
  {
    return parameterSearchSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getParameterSearchSpec_Parameters()
  {
    return (EReference)parameterSearchSpecEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParameter()
  {
    return parameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getParameter_Name()
  {
    return (EAttribute)parameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getParameter_Value()
  {
    return (EReference)parameterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParameterValue()
  {
    return parameterValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getParameterValue_Numeric()
  {
    return (EAttribute)parameterValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getParameterValue_Functional()
  {
    return (EAttribute)parameterValueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getParameterValue_Parametric()
  {
    return (EAttribute)parameterValueEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getParameterValue_Params()
  {
    return (EReference)parameterValueEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getEvolverType()
  {
    return evolverTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoptFactory getMoptFactory()
  {
    return (MoptFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    optimisationEClass = createEClass(OPTIMISATION);
    createEReference(optimisationEClass, OPTIMISATION__PROBLEM);
    createEReference(optimisationEClass, OPTIMISATION__GOAL);
    createEReference(optimisationEClass, OPTIMISATION__SEARCH);
    createEReference(optimisationEClass, OPTIMISATION__SOLVER);

    problemSpecEClass = createEClass(PROBLEM_SPEC);
    createEReference(problemSpecEClass, PROBLEM_SPEC__BASEPATH);
    createEReference(problemSpecEClass, PROBLEM_SPEC__METAMODEL);
    createEReference(problemSpecEClass, PROBLEM_SPEC__MODEL);
    createEReference(problemSpecEClass, PROBLEM_SPEC__MODEL_INITIALISER);

    goalSpecEClass = createEClass(GOAL_SPEC);
    createEReference(goalSpecEClass, GOAL_SPEC__REFINEMENTS);
    createEReference(goalSpecEClass, GOAL_SPEC__OBJECTIVES);
    createEReference(goalSpecEClass, GOAL_SPEC__CONSTRAINTS);

    searchSpecEClass = createEClass(SEARCH_SPEC);
    createEReference(searchSpecEClass, SEARCH_SPEC__REPORTS);
    createEReference(searchSpecEClass, SEARCH_SPEC__EVOLVERS);
    createEReference(searchSpecEClass, SEARCH_SPEC__RULEGEN);

    solverSpecEClass = createEClass(SOLVER_SPEC);
    createEAttribute(solverSpecEClass, SOLVER_SPEC__SOLVER_ENGINE);
    createEAttribute(solverSpecEClass, SOLVER_SPEC__ALGORITHM_FACTORY);
    createEReference(solverSpecEClass, SOLVER_SPEC__ALGORITHM);
    createEReference(solverSpecEClass, SOLVER_SPEC__TERMINATION_CONDITION);
    createEReference(solverSpecEClass, SOLVER_SPEC__PARAMETER_SEARCH);
    createEAttribute(solverSpecEClass, SOLVER_SPEC__ALGORITHM_BATCHES);

    basePathSpecEClass = createEClass(BASE_PATH_SPEC);
    createEAttribute(basePathSpecEClass, BASE_PATH_SPEC__LOCATION);

    metaModelSpecEClass = createEClass(META_MODEL_SPEC);
    createEAttribute(metaModelSpecEClass, META_MODEL_SPEC__LOCATION);

    modelPathSpecEClass = createEClass(MODEL_PATH_SPEC);
    createEAttribute(modelPathSpecEClass, MODEL_PATH_SPEC__LOCATION);

    objectiveInterpreterSpecEClass = createEClass(OBJECTIVE_INTERPRETER_SPEC);
    createEAttribute(objectiveInterpreterSpecEClass, OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_NAME);
    createEAttribute(objectiveInterpreterSpecEClass, OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_TENDENCY);
    createEAttribute(objectiveInterpreterSpecEClass, OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_TYPE);
    createEAttribute(objectiveInterpreterSpecEClass, OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_SPEC);

    constraintInterpreterSpecEClass = createEClass(CONSTRAINT_INTERPRETER_SPEC);
    createEAttribute(constraintInterpreterSpecEClass, CONSTRAINT_INTERPRETER_SPEC__CONSTRAINT_NAME);
    createEAttribute(constraintInterpreterSpecEClass, CONSTRAINT_INTERPRETER_SPEC__CONSTRAINT_TYPE);
    createEAttribute(constraintInterpreterSpecEClass, CONSTRAINT_INTERPRETER_SPEC__CONSTRAINT_SPEC);

    modelInitialiserSpecEClass = createEClass(MODEL_INITIALISER_SPEC);
    createEAttribute(modelInitialiserSpecEClass, MODEL_INITIALISER_SPEC__INITIALISER);

    rulegenSpecEClass = createEClass(RULEGEN_SPEC);
    createEReference(rulegenSpecEClass, RULEGEN_SPEC__NODE_SPEC);
    createEReference(rulegenSpecEClass, RULEGEN_SPEC__EDGE_SPEC);

    rulegenNodeEClass = createEClass(RULEGEN_NODE);
    createEAttribute(rulegenNodeEClass, RULEGEN_NODE__NODE);
    createEAttribute(rulegenNodeEClass, RULEGEN_NODE__GENERATION_RESTRICTION);

    rulegenEdgeEClass = createEClass(RULEGEN_EDGE);
    createEAttribute(rulegenEdgeEClass, RULEGEN_EDGE__NODE);
    createEAttribute(rulegenEdgeEClass, RULEGEN_EDGE__EDGE);
    createEAttribute(rulegenEdgeEClass, RULEGEN_EDGE__GENERATION_RESTRICTION);

    reportInterpreterSpecEClass = createEClass(REPORT_INTERPRETER_SPEC);
    createEAttribute(reportInterpreterSpecEClass, REPORT_INTERPRETER_SPEC__REPORT_NAME);
    createEAttribute(reportInterpreterSpecEClass, REPORT_INTERPRETER_SPEC__REPORT_SPEC);

    evolverSpecEClass = createEClass(EVOLVER_SPEC);
    createEAttribute(evolverSpecEClass, EVOLVER_SPEC__EVOLVER_TYPE);
    createEAttribute(evolverSpecEClass, EVOLVER_SPEC__RULE_LOCATION);
    createEAttribute(evolverSpecEClass, EVOLVER_SPEC__UNIT);
    createEReference(evolverSpecEClass, EVOLVER_SPEC__PARAMETERS);

    multiplicityRefinementSpecEClass = createEClass(MULTIPLICITY_REFINEMENT_SPEC);
    createEAttribute(multiplicityRefinementSpecEClass, MULTIPLICITY_REFINEMENT_SPEC__NODE);
    createEAttribute(multiplicityRefinementSpecEClass, MULTIPLICITY_REFINEMENT_SPEC__EDGE);
    createEAttribute(multiplicityRefinementSpecEClass, MULTIPLICITY_REFINEMENT_SPEC__LOWER_BOUND);
    createEAttribute(multiplicityRefinementSpecEClass, MULTIPLICITY_REFINEMENT_SPEC__UPPER_BOUND);

    evolverParameterEClass = createEClass(EVOLVER_PARAMETER);
    createEAttribute(evolverParameterEClass, EVOLVER_PARAMETER__NAME);
    createEReference(evolverParameterEClass, EVOLVER_PARAMETER__FUNCTION);
    createEAttribute(evolverParameterEClass, EVOLVER_PARAMETER__CUSTOM_FUNCTION);

    parameterFunctionEClass = createEClass(PARAMETER_FUNCTION);
    createEAttribute(parameterFunctionEClass, PARAMETER_FUNCTION__NAME);
    createEAttribute(parameterFunctionEClass, PARAMETER_FUNCTION__PARAMETER);

    algorithmSpecEClass = createEClass(ALGORITHM_SPEC);
    createEAttribute(algorithmSpecEClass, ALGORITHM_SPEC__NAME);
    createEReference(algorithmSpecEClass, ALGORITHM_SPEC__PARAMETERS);

    terminationConditionSpecEClass = createEClass(TERMINATION_CONDITION_SPEC);
    createEReference(terminationConditionSpecEClass, TERMINATION_CONDITION_SPEC__PARAMETERS);

    parameterSearchSpecEClass = createEClass(PARAMETER_SEARCH_SPEC);
    createEReference(parameterSearchSpecEClass, PARAMETER_SEARCH_SPEC__PARAMETERS);

    parameterEClass = createEClass(PARAMETER);
    createEAttribute(parameterEClass, PARAMETER__NAME);
    createEReference(parameterEClass, PARAMETER__VALUE);

    parameterValueEClass = createEClass(PARAMETER_VALUE);
    createEAttribute(parameterValueEClass, PARAMETER_VALUE__NUMERIC);
    createEAttribute(parameterValueEClass, PARAMETER_VALUE__FUNCTIONAL);
    createEAttribute(parameterValueEClass, PARAMETER_VALUE__PARAMETRIC);
    createEReference(parameterValueEClass, PARAMETER_VALUE__PARAMS);

    // Create enums
    evolverTypeEEnum = createEEnum(EVOLVER_TYPE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Obtain other dependent packages
    XbasePackage theXbasePackage = (XbasePackage)EPackage.Registry.INSTANCE.getEPackage(XbasePackage.eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes

    // Initialize classes and features; add operations and parameters
    initEClass(optimisationEClass, Optimisation.class, "Optimisation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOptimisation_Problem(), this.getProblemSpec(), null, "problem", null, 0, 1, Optimisation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOptimisation_Goal(), this.getGoalSpec(), null, "goal", null, 0, 1, Optimisation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOptimisation_Search(), this.getSearchSpec(), null, "search", null, 0, 1, Optimisation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOptimisation_Solver(), this.getSolverSpec(), null, "solver", null, 0, 1, Optimisation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(problemSpecEClass, ProblemSpec.class, "ProblemSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getProblemSpec_Basepath(), this.getBasePathSpec(), null, "basepath", null, 0, 1, ProblemSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProblemSpec_Metamodel(), this.getMetaModelSpec(), null, "metamodel", null, 0, 1, ProblemSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProblemSpec_Model(), this.getModelPathSpec(), null, "model", null, 0, 1, ProblemSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProblemSpec_ModelInitialiser(), this.getModelInitialiserSpec(), null, "modelInitialiser", null, 0, 1, ProblemSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(goalSpecEClass, GoalSpec.class, "GoalSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getGoalSpec_Refinements(), this.getMultiplicityRefinementSpec(), null, "refinements", null, 0, -1, GoalSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getGoalSpec_Objectives(), this.getObjectiveInterpreterSpec(), null, "objectives", null, 0, -1, GoalSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getGoalSpec_Constraints(), this.getConstraintInterpreterSpec(), null, "constraints", null, 0, -1, GoalSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(searchSpecEClass, SearchSpec.class, "SearchSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSearchSpec_Reports(), this.getReportInterpreterSpec(), null, "reports", null, 0, -1, SearchSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSearchSpec_Evolvers(), this.getEvolverSpec(), null, "evolvers", null, 0, -1, SearchSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSearchSpec_Rulegen(), this.getRulegenSpec(), null, "rulegen", null, 0, -1, SearchSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(solverSpecEClass, SolverSpec.class, "SolverSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSolverSpec_SolverEngine(), ecorePackage.getEString(), "solverEngine", null, 0, 1, SolverSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSolverSpec_AlgorithmFactory(), ecorePackage.getEString(), "algorithmFactory", null, 0, 1, SolverSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSolverSpec_Algorithm(), this.getAlgorithmSpec(), null, "algorithm", null, 0, 1, SolverSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSolverSpec_TerminationCondition(), this.getTerminationConditionSpec(), null, "terminationCondition", null, 0, 1, SolverSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSolverSpec_ParameterSearch(), this.getParameterSearchSpec(), null, "parameterSearch", null, 0, 1, SolverSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSolverSpec_AlgorithmBatches(), ecorePackage.getEInt(), "algorithmBatches", null, 0, 1, SolverSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(basePathSpecEClass, BasePathSpec.class, "BasePathSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBasePathSpec_Location(), ecorePackage.getEString(), "location", null, 0, 1, BasePathSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(metaModelSpecEClass, MetaModelSpec.class, "MetaModelSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMetaModelSpec_Location(), ecorePackage.getEString(), "location", null, 0, 1, MetaModelSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(modelPathSpecEClass, ModelPathSpec.class, "ModelPathSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getModelPathSpec_Location(), ecorePackage.getEString(), "location", null, 0, 1, ModelPathSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(objectiveInterpreterSpecEClass, ObjectiveInterpreterSpec.class, "ObjectiveInterpreterSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getObjectiveInterpreterSpec_ObjectiveName(), ecorePackage.getEString(), "objectiveName", null, 0, 1, ObjectiveInterpreterSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getObjectiveInterpreterSpec_ObjectiveTendency(), ecorePackage.getEString(), "objectiveTendency", null, 0, 1, ObjectiveInterpreterSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getObjectiveInterpreterSpec_ObjectiveType(), ecorePackage.getEString(), "objectiveType", null, 0, 1, ObjectiveInterpreterSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getObjectiveInterpreterSpec_ObjectiveSpec(), ecorePackage.getEString(), "objectiveSpec", null, 0, 1, ObjectiveInterpreterSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(constraintInterpreterSpecEClass, ConstraintInterpreterSpec.class, "ConstraintInterpreterSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConstraintInterpreterSpec_ConstraintName(), ecorePackage.getEString(), "constraintName", null, 0, 1, ConstraintInterpreterSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConstraintInterpreterSpec_ConstraintType(), ecorePackage.getEString(), "constraintType", null, 0, 1, ConstraintInterpreterSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConstraintInterpreterSpec_ConstraintSpec(), ecorePackage.getEString(), "constraintSpec", null, 0, 1, ConstraintInterpreterSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(modelInitialiserSpecEClass, ModelInitialiserSpec.class, "ModelInitialiserSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getModelInitialiserSpec_Initialiser(), ecorePackage.getEString(), "initialiser", null, 0, 1, ModelInitialiserSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rulegenSpecEClass, RulegenSpec.class, "RulegenSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRulegenSpec_NodeSpec(), this.getRulegenNode(), null, "nodeSpec", null, 0, 1, RulegenSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRulegenSpec_EdgeSpec(), this.getRulegenEdge(), null, "edgeSpec", null, 0, 1, RulegenSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rulegenNodeEClass, RulegenNode.class, "RulegenNode", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRulegenNode_Node(), ecorePackage.getEString(), "node", null, 0, 1, RulegenNode.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRulegenNode_GenerationRestriction(), ecorePackage.getEString(), "generationRestriction", null, 0, 1, RulegenNode.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rulegenEdgeEClass, RulegenEdge.class, "RulegenEdge", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRulegenEdge_Node(), ecorePackage.getEString(), "node", null, 0, 1, RulegenEdge.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRulegenEdge_Edge(), ecorePackage.getEString(), "edge", null, 0, 1, RulegenEdge.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRulegenEdge_GenerationRestriction(), ecorePackage.getEString(), "generationRestriction", null, 0, 1, RulegenEdge.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(reportInterpreterSpecEClass, ReportInterpreterSpec.class, "ReportInterpreterSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getReportInterpreterSpec_ReportName(), ecorePackage.getEString(), "reportName", null, 0, 1, ReportInterpreterSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getReportInterpreterSpec_ReportSpec(), ecorePackage.getEString(), "reportSpec", null, 0, 1, ReportInterpreterSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(evolverSpecEClass, EvolverSpec.class, "EvolverSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEvolverSpec_EvolverType(), this.getEvolverType(), "evolverType", null, 0, 1, EvolverSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvolverSpec_Rule_location(), ecorePackage.getEString(), "rule_location", null, 0, 1, EvolverSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvolverSpec_Unit(), ecorePackage.getEString(), "unit", null, 0, 1, EvolverSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEvolverSpec_Parameters(), this.getEvolverParameter(), null, "parameters", null, 0, -1, EvolverSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(multiplicityRefinementSpecEClass, MultiplicityRefinementSpec.class, "MultiplicityRefinementSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMultiplicityRefinementSpec_Node(), ecorePackage.getEString(), "node", null, 0, 1, MultiplicityRefinementSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMultiplicityRefinementSpec_Edge(), ecorePackage.getEString(), "edge", null, 0, 1, MultiplicityRefinementSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMultiplicityRefinementSpec_LowerBound(), ecorePackage.getEInt(), "lowerBound", null, 0, 1, MultiplicityRefinementSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMultiplicityRefinementSpec_UpperBound(), ecorePackage.getEIntegerObject(), "upperBound", null, 0, 1, MultiplicityRefinementSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(evolverParameterEClass, EvolverParameter.class, "EvolverParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEvolverParameter_Name(), ecorePackage.getEString(), "name", null, 0, 1, EvolverParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEvolverParameter_Function(), this.getParameterFunction(), null, "function", null, 0, 1, EvolverParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvolverParameter_CustomFunction(), ecorePackage.getEString(), "customFunction", null, 0, 1, EvolverParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterFunctionEClass, ParameterFunction.class, "ParameterFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParameterFunction_Name(), ecorePackage.getEString(), "name", null, 0, 1, ParameterFunction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getParameterFunction_Parameter(), ecorePackage.getEString(), "parameter", null, 0, 1, ParameterFunction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(algorithmSpecEClass, AlgorithmSpec.class, "AlgorithmSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAlgorithmSpec_Name(), ecorePackage.getEString(), "name", null, 0, 1, AlgorithmSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAlgorithmSpec_Parameters(), this.getParameter(), null, "parameters", null, 0, -1, AlgorithmSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(terminationConditionSpecEClass, TerminationConditionSpec.class, "TerminationConditionSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTerminationConditionSpec_Parameters(), this.getParameter(), null, "parameters", null, 0, -1, TerminationConditionSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterSearchSpecEClass, ParameterSearchSpec.class, "ParameterSearchSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getParameterSearchSpec_Parameters(), this.getParameter(), null, "parameters", null, 0, -1, ParameterSearchSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterEClass, Parameter.class, "Parameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParameter_Name(), ecorePackage.getEString(), "name", null, 0, 1, Parameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getParameter_Value(), this.getParameterValue(), null, "value", null, 0, 1, Parameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterValueEClass, ParameterValue.class, "ParameterValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParameterValue_Numeric(), ecorePackage.getEString(), "numeric", null, 0, 1, ParameterValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getParameterValue_Functional(), ecorePackage.getEString(), "functional", null, 0, 1, ParameterValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getParameterValue_Parametric(), ecorePackage.getEString(), "parametric", null, 0, 1, ParameterValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getParameterValue_Params(), theXbasePackage.getXExpression(), null, "params", null, 0, -1, ParameterValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(evolverTypeEEnum, EvolverType.class, "EvolverType");
    addEEnumLiteral(evolverTypeEEnum, EvolverType.MUTATE);
    addEEnumLiteral(evolverTypeEEnum, EvolverType.BREED);

    // Create resource
    createResource(eNS_URI);
  }

} //MoptPackageImpl
