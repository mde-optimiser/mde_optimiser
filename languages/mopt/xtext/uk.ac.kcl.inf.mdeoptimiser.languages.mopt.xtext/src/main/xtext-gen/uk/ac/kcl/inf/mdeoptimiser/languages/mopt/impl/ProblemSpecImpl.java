/**
 * generated by Xtext 2.17.0
 */
package uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.BasePathSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MetaModelSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ModelInitialiserSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ModelPathSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MoptPackage;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ProblemSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Problem Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.ProblemSpecImpl#getBasepath <em>Basepath</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.ProblemSpecImpl#getMetamodel <em>Metamodel</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.ProblemSpecImpl#getModel <em>Model</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.ProblemSpecImpl#getModelInitialiser <em>Model Initialiser</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProblemSpecImpl extends MinimalEObjectImpl.Container implements ProblemSpec
{
  /**
   * The cached value of the '{@link #getBasepath() <em>Basepath</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBasepath()
   * @generated
   * @ordered
   */
  protected BasePathSpec basepath;

  /**
   * The cached value of the '{@link #getMetamodel() <em>Metamodel</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetamodel()
   * @generated
   * @ordered
   */
  protected MetaModelSpec metamodel;

  /**
   * The cached value of the '{@link #getModel() <em>Model</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModel()
   * @generated
   * @ordered
   */
  protected ModelPathSpec model;

  /**
   * The cached value of the '{@link #getModelInitialiser() <em>Model Initialiser</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelInitialiser()
   * @generated
   * @ordered
   */
  protected ModelInitialiserSpec modelInitialiser;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProblemSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoptPackage.Literals.PROBLEM_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasePathSpec getBasepath()
  {
    return basepath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBasepath(BasePathSpec newBasepath, NotificationChain msgs)
  {
    BasePathSpec oldBasepath = basepath;
    basepath = newBasepath;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.PROBLEM_SPEC__BASEPATH, oldBasepath, newBasepath);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBasepath(BasePathSpec newBasepath)
  {
    if (newBasepath != basepath)
    {
      NotificationChain msgs = null;
      if (basepath != null)
        msgs = ((InternalEObject)basepath).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.PROBLEM_SPEC__BASEPATH, null, msgs);
      if (newBasepath != null)
        msgs = ((InternalEObject)newBasepath).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.PROBLEM_SPEC__BASEPATH, null, msgs);
      msgs = basicSetBasepath(newBasepath, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.PROBLEM_SPEC__BASEPATH, newBasepath, newBasepath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaModelSpec getMetamodel()
  {
    return metamodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMetamodel(MetaModelSpec newMetamodel, NotificationChain msgs)
  {
    MetaModelSpec oldMetamodel = metamodel;
    metamodel = newMetamodel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.PROBLEM_SPEC__METAMODEL, oldMetamodel, newMetamodel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMetamodel(MetaModelSpec newMetamodel)
  {
    if (newMetamodel != metamodel)
    {
      NotificationChain msgs = null;
      if (metamodel != null)
        msgs = ((InternalEObject)metamodel).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.PROBLEM_SPEC__METAMODEL, null, msgs);
      if (newMetamodel != null)
        msgs = ((InternalEObject)newMetamodel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.PROBLEM_SPEC__METAMODEL, null, msgs);
      msgs = basicSetMetamodel(newMetamodel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.PROBLEM_SPEC__METAMODEL, newMetamodel, newMetamodel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelPathSpec getModel()
  {
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModel(ModelPathSpec newModel, NotificationChain msgs)
  {
    ModelPathSpec oldModel = model;
    model = newModel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.PROBLEM_SPEC__MODEL, oldModel, newModel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setModel(ModelPathSpec newModel)
  {
    if (newModel != model)
    {
      NotificationChain msgs = null;
      if (model != null)
        msgs = ((InternalEObject)model).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.PROBLEM_SPEC__MODEL, null, msgs);
      if (newModel != null)
        msgs = ((InternalEObject)newModel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.PROBLEM_SPEC__MODEL, null, msgs);
      msgs = basicSetModel(newModel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.PROBLEM_SPEC__MODEL, newModel, newModel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelInitialiserSpec getModelInitialiser()
  {
    return modelInitialiser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModelInitialiser(ModelInitialiserSpec newModelInitialiser, NotificationChain msgs)
  {
    ModelInitialiserSpec oldModelInitialiser = modelInitialiser;
    modelInitialiser = newModelInitialiser;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.PROBLEM_SPEC__MODEL_INITIALISER, oldModelInitialiser, newModelInitialiser);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setModelInitialiser(ModelInitialiserSpec newModelInitialiser)
  {
    if (newModelInitialiser != modelInitialiser)
    {
      NotificationChain msgs = null;
      if (modelInitialiser != null)
        msgs = ((InternalEObject)modelInitialiser).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.PROBLEM_SPEC__MODEL_INITIALISER, null, msgs);
      if (newModelInitialiser != null)
        msgs = ((InternalEObject)newModelInitialiser).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.PROBLEM_SPEC__MODEL_INITIALISER, null, msgs);
      msgs = basicSetModelInitialiser(newModelInitialiser, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.PROBLEM_SPEC__MODEL_INITIALISER, newModelInitialiser, newModelInitialiser));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoptPackage.PROBLEM_SPEC__BASEPATH:
        return basicSetBasepath(null, msgs);
      case MoptPackage.PROBLEM_SPEC__METAMODEL:
        return basicSetMetamodel(null, msgs);
      case MoptPackage.PROBLEM_SPEC__MODEL:
        return basicSetModel(null, msgs);
      case MoptPackage.PROBLEM_SPEC__MODEL_INITIALISER:
        return basicSetModelInitialiser(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoptPackage.PROBLEM_SPEC__BASEPATH:
        return getBasepath();
      case MoptPackage.PROBLEM_SPEC__METAMODEL:
        return getMetamodel();
      case MoptPackage.PROBLEM_SPEC__MODEL:
        return getModel();
      case MoptPackage.PROBLEM_SPEC__MODEL_INITIALISER:
        return getModelInitialiser();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoptPackage.PROBLEM_SPEC__BASEPATH:
        setBasepath((BasePathSpec)newValue);
        return;
      case MoptPackage.PROBLEM_SPEC__METAMODEL:
        setMetamodel((MetaModelSpec)newValue);
        return;
      case MoptPackage.PROBLEM_SPEC__MODEL:
        setModel((ModelPathSpec)newValue);
        return;
      case MoptPackage.PROBLEM_SPEC__MODEL_INITIALISER:
        setModelInitialiser((ModelInitialiserSpec)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoptPackage.PROBLEM_SPEC__BASEPATH:
        setBasepath((BasePathSpec)null);
        return;
      case MoptPackage.PROBLEM_SPEC__METAMODEL:
        setMetamodel((MetaModelSpec)null);
        return;
      case MoptPackage.PROBLEM_SPEC__MODEL:
        setModel((ModelPathSpec)null);
        return;
      case MoptPackage.PROBLEM_SPEC__MODEL_INITIALISER:
        setModelInitialiser((ModelInitialiserSpec)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoptPackage.PROBLEM_SPEC__BASEPATH:
        return basepath != null;
      case MoptPackage.PROBLEM_SPEC__METAMODEL:
        return metamodel != null;
      case MoptPackage.PROBLEM_SPEC__MODEL:
        return model != null;
      case MoptPackage.PROBLEM_SPEC__MODEL_INITIALISER:
        return modelInitialiser != null;
    }
    return super.eIsSet(featureID);
  }

} //ProblemSpecImpl
