/**
 * generated by Xtext 2.17.0
 */
package uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.AlgorithmSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.MoptPackage;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.ParameterSearchSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.SolverSpec;
import uk.ac.kcl.inf.mdeoptimiser.languages.mopt.TerminationConditionSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Solver Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.SolverSpecImpl#getSolverEngine <em>Solver Engine</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.SolverSpecImpl#getAlgorithmFactory <em>Algorithm Factory</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.SolverSpecImpl#getAlgorithm <em>Algorithm</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.SolverSpecImpl#getTerminationCondition <em>Termination Condition</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.SolverSpecImpl#getParameterSearch <em>Parameter Search</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdeoptimiser.languages.mopt.impl.SolverSpecImpl#getAlgorithmBatches <em>Algorithm Batches</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SolverSpecImpl extends MinimalEObjectImpl.Container implements SolverSpec
{
  /**
   * The default value of the '{@link #getSolverEngine() <em>Solver Engine</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSolverEngine()
   * @generated
   * @ordered
   */
  protected static final String SOLVER_ENGINE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSolverEngine() <em>Solver Engine</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSolverEngine()
   * @generated
   * @ordered
   */
  protected String solverEngine = SOLVER_ENGINE_EDEFAULT;

  /**
   * The default value of the '{@link #getAlgorithmFactory() <em>Algorithm Factory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmFactory()
   * @generated
   * @ordered
   */
  protected static final String ALGORITHM_FACTORY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAlgorithmFactory() <em>Algorithm Factory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmFactory()
   * @generated
   * @ordered
   */
  protected String algorithmFactory = ALGORITHM_FACTORY_EDEFAULT;

  /**
   * The cached value of the '{@link #getAlgorithm() <em>Algorithm</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithm()
   * @generated
   * @ordered
   */
  protected AlgorithmSpec algorithm;

  /**
   * The cached value of the '{@link #getTerminationCondition() <em>Termination Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerminationCondition()
   * @generated
   * @ordered
   */
  protected TerminationConditionSpec terminationCondition;

  /**
   * The cached value of the '{@link #getParameterSearch() <em>Parameter Search</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameterSearch()
   * @generated
   * @ordered
   */
  protected ParameterSearchSpec parameterSearch;

  /**
   * The default value of the '{@link #getAlgorithmBatches() <em>Algorithm Batches</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmBatches()
   * @generated
   * @ordered
   */
  protected static final int ALGORITHM_BATCHES_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getAlgorithmBatches() <em>Algorithm Batches</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmBatches()
   * @generated
   * @ordered
   */
  protected int algorithmBatches = ALGORITHM_BATCHES_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SolverSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoptPackage.Literals.SOLVER_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSolverEngine()
  {
    return solverEngine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSolverEngine(String newSolverEngine)
  {
    String oldSolverEngine = solverEngine;
    solverEngine = newSolverEngine;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.SOLVER_SPEC__SOLVER_ENGINE, oldSolverEngine, solverEngine));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAlgorithmFactory()
  {
    return algorithmFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlgorithmFactory(String newAlgorithmFactory)
  {
    String oldAlgorithmFactory = algorithmFactory;
    algorithmFactory = newAlgorithmFactory;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.SOLVER_SPEC__ALGORITHM_FACTORY, oldAlgorithmFactory, algorithmFactory));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlgorithmSpec getAlgorithm()
  {
    return algorithm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlgorithm(AlgorithmSpec newAlgorithm, NotificationChain msgs)
  {
    AlgorithmSpec oldAlgorithm = algorithm;
    algorithm = newAlgorithm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.SOLVER_SPEC__ALGORITHM, oldAlgorithm, newAlgorithm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlgorithm(AlgorithmSpec newAlgorithm)
  {
    if (newAlgorithm != algorithm)
    {
      NotificationChain msgs = null;
      if (algorithm != null)
        msgs = ((InternalEObject)algorithm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.SOLVER_SPEC__ALGORITHM, null, msgs);
      if (newAlgorithm != null)
        msgs = ((InternalEObject)newAlgorithm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.SOLVER_SPEC__ALGORITHM, null, msgs);
      msgs = basicSetAlgorithm(newAlgorithm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.SOLVER_SPEC__ALGORITHM, newAlgorithm, newAlgorithm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TerminationConditionSpec getTerminationCondition()
  {
    return terminationCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTerminationCondition(TerminationConditionSpec newTerminationCondition, NotificationChain msgs)
  {
    TerminationConditionSpec oldTerminationCondition = terminationCondition;
    terminationCondition = newTerminationCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.SOLVER_SPEC__TERMINATION_CONDITION, oldTerminationCondition, newTerminationCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTerminationCondition(TerminationConditionSpec newTerminationCondition)
  {
    if (newTerminationCondition != terminationCondition)
    {
      NotificationChain msgs = null;
      if (terminationCondition != null)
        msgs = ((InternalEObject)terminationCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.SOLVER_SPEC__TERMINATION_CONDITION, null, msgs);
      if (newTerminationCondition != null)
        msgs = ((InternalEObject)newTerminationCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.SOLVER_SPEC__TERMINATION_CONDITION, null, msgs);
      msgs = basicSetTerminationCondition(newTerminationCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.SOLVER_SPEC__TERMINATION_CONDITION, newTerminationCondition, newTerminationCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterSearchSpec getParameterSearch()
  {
    return parameterSearch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParameterSearch(ParameterSearchSpec newParameterSearch, NotificationChain msgs)
  {
    ParameterSearchSpec oldParameterSearch = parameterSearch;
    parameterSearch = newParameterSearch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoptPackage.SOLVER_SPEC__PARAMETER_SEARCH, oldParameterSearch, newParameterSearch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParameterSearch(ParameterSearchSpec newParameterSearch)
  {
    if (newParameterSearch != parameterSearch)
    {
      NotificationChain msgs = null;
      if (parameterSearch != null)
        msgs = ((InternalEObject)parameterSearch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoptPackage.SOLVER_SPEC__PARAMETER_SEARCH, null, msgs);
      if (newParameterSearch != null)
        msgs = ((InternalEObject)newParameterSearch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoptPackage.SOLVER_SPEC__PARAMETER_SEARCH, null, msgs);
      msgs = basicSetParameterSearch(newParameterSearch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.SOLVER_SPEC__PARAMETER_SEARCH, newParameterSearch, newParameterSearch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getAlgorithmBatches()
  {
    return algorithmBatches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlgorithmBatches(int newAlgorithmBatches)
  {
    int oldAlgorithmBatches = algorithmBatches;
    algorithmBatches = newAlgorithmBatches;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoptPackage.SOLVER_SPEC__ALGORITHM_BATCHES, oldAlgorithmBatches, algorithmBatches));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoptPackage.SOLVER_SPEC__ALGORITHM:
        return basicSetAlgorithm(null, msgs);
      case MoptPackage.SOLVER_SPEC__TERMINATION_CONDITION:
        return basicSetTerminationCondition(null, msgs);
      case MoptPackage.SOLVER_SPEC__PARAMETER_SEARCH:
        return basicSetParameterSearch(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoptPackage.SOLVER_SPEC__SOLVER_ENGINE:
        return getSolverEngine();
      case MoptPackage.SOLVER_SPEC__ALGORITHM_FACTORY:
        return getAlgorithmFactory();
      case MoptPackage.SOLVER_SPEC__ALGORITHM:
        return getAlgorithm();
      case MoptPackage.SOLVER_SPEC__TERMINATION_CONDITION:
        return getTerminationCondition();
      case MoptPackage.SOLVER_SPEC__PARAMETER_SEARCH:
        return getParameterSearch();
      case MoptPackage.SOLVER_SPEC__ALGORITHM_BATCHES:
        return getAlgorithmBatches();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoptPackage.SOLVER_SPEC__SOLVER_ENGINE:
        setSolverEngine((String)newValue);
        return;
      case MoptPackage.SOLVER_SPEC__ALGORITHM_FACTORY:
        setAlgorithmFactory((String)newValue);
        return;
      case MoptPackage.SOLVER_SPEC__ALGORITHM:
        setAlgorithm((AlgorithmSpec)newValue);
        return;
      case MoptPackage.SOLVER_SPEC__TERMINATION_CONDITION:
        setTerminationCondition((TerminationConditionSpec)newValue);
        return;
      case MoptPackage.SOLVER_SPEC__PARAMETER_SEARCH:
        setParameterSearch((ParameterSearchSpec)newValue);
        return;
      case MoptPackage.SOLVER_SPEC__ALGORITHM_BATCHES:
        setAlgorithmBatches((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoptPackage.SOLVER_SPEC__SOLVER_ENGINE:
        setSolverEngine(SOLVER_ENGINE_EDEFAULT);
        return;
      case MoptPackage.SOLVER_SPEC__ALGORITHM_FACTORY:
        setAlgorithmFactory(ALGORITHM_FACTORY_EDEFAULT);
        return;
      case MoptPackage.SOLVER_SPEC__ALGORITHM:
        setAlgorithm((AlgorithmSpec)null);
        return;
      case MoptPackage.SOLVER_SPEC__TERMINATION_CONDITION:
        setTerminationCondition((TerminationConditionSpec)null);
        return;
      case MoptPackage.SOLVER_SPEC__PARAMETER_SEARCH:
        setParameterSearch((ParameterSearchSpec)null);
        return;
      case MoptPackage.SOLVER_SPEC__ALGORITHM_BATCHES:
        setAlgorithmBatches(ALGORITHM_BATCHES_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoptPackage.SOLVER_SPEC__SOLVER_ENGINE:
        return SOLVER_ENGINE_EDEFAULT == null ? solverEngine != null : !SOLVER_ENGINE_EDEFAULT.equals(solverEngine);
      case MoptPackage.SOLVER_SPEC__ALGORITHM_FACTORY:
        return ALGORITHM_FACTORY_EDEFAULT == null ? algorithmFactory != null : !ALGORITHM_FACTORY_EDEFAULT.equals(algorithmFactory);
      case MoptPackage.SOLVER_SPEC__ALGORITHM:
        return algorithm != null;
      case MoptPackage.SOLVER_SPEC__TERMINATION_CONDITION:
        return terminationCondition != null;
      case MoptPackage.SOLVER_SPEC__PARAMETER_SEARCH:
        return parameterSearch != null;
      case MoptPackage.SOLVER_SPEC__ALGORITHM_BATCHES:
        return algorithmBatches != ALGORITHM_BATCHES_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (solverEngine: ");
    result.append(solverEngine);
    result.append(", algorithmFactory: ");
    result.append(algorithmFactory);
    result.append(", algorithmBatches: ");
    result.append(algorithmBatches);
    result.append(')');
    return result.toString();
  }

} //SolverSpecImpl
